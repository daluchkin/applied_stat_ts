[["index.html", "Applied statistics: Time series analysis Preface", " Applied statistics: Time series analysis Dmitry Luchkin 2024-12-16 Preface These are my personal learning notes, created while listening to the online lecture series “Time Series Analysis” by Boris Demeshev. The lectures are a remarkable resource for understanding the fundamentals and practical applications of time series analysis. I believe this lecture series deserves far more views and likes than it currently has, given its clarity, depth, and accessibility. These notes are primarily for my own learning, but I hope they may also serve as a guide or inspiration for others exploring this fascinating subject. "],["components-of-time-series-and-naive-models.html", "Chapter 1 Components of time series and naive models 1.1 What is time series? 1.2 Time Series Components 1.3 Algorithm STL 1.4 Time Series Characteristics 1.5 Simple Models 1.6 Examples", " Chapter 1 Components of time series and naive models 1.1 What is time series? A time series is a sequence of observations or random variables ordered by time. 1.2 Time Series Components Trend, cyclicity, seasonality Additive and multiplicative decomposition The additive decomposition of a time series is represented as: \\[Y_t = T_t + S_t + R_t\\] where: \\(Y_t\\) is the observed value at time \\(t\\), \\(T_t\\) is the trend component, \\(S_t\\) is the seasonal component, \\(R_t\\) is the residual (or random) component. Trend is a smoothly changing component of a time series. Seasonality is a strong periodic component with stable intensity. The multiplicative decomposition of a time series is represented as: \\[Y_t = T_t \\times S_t \\times R_t\\] where: - \\(Y_t\\) is the observed value at time \\(t\\), - \\(T_t\\) is the trend component, - \\(S_t\\) is the seasonal component, - \\(R_t\\) is the residual (or random) component. Transform additive to multiplicative: \\[ln(Y_t) = ln(T_t \\times S_t \\times R_t) = ln(T_t) + ln(S_t) + ln(R_t)\\] 1.3 Algorithm STL STL - Seasonal Trend Decomposition with Loess. Loess - local linear regression. 1.4 Time Series Characteristics ACF \\(\\hat{y}_t = \\hat{\\beta}_1 + \\hat{\\beta}_2 y_{t-1}, ACF_1 = \\hat{\\beta}_2\\) \\(\\hat{y}_t = \\hat{\\beta}_1 + \\hat{\\beta}_2 y_{t-1}, ACF_2 = \\hat{\\beta}_2\\) \\(\\hat{y}_t = \\hat{\\beta}_1 + \\hat{\\beta}_2 y_{t-k}, ACF_k = \\hat{\\beta}_2\\) \\(ACF_k\\) is a sample correlation between \\(y_t\\) and \\(y_{t-k}\\) PACF \\(\\hat{y}_t = \\hat{\\alpha} + \\hat{\\beta}_1y_{t-1}, PACF_1 = \\hat{\\beta}_1\\) \\(\\hat{y}_t = \\hat{\\alpha} + \\hat{\\beta}_1 y_{t-1} + \\hat{\\beta}_2 y_{t-2}, PACF_2 = \\hat{\\beta}_2\\) \\(\\hat{y}_t = \\hat{\\alpha} + \\hat{\\beta}_1 y_{t-1} + ... + \\hat{\\beta}_k y_{t-k}, PACF_k = \\hat{\\beta}_k\\) 1.5 Simple Models White Noise Time series \\(u_t\\) is a white noise, if: \\(\\mathbb{E}(u_t) = 0\\) \\(Var(u_t) = \\sigma^2\\) \\(Cov(u_s, u_t) = 0, s \\neq t\\) White noise is a part of each statistical model. Model with independent observations \\(y_t = \\mu + u_t\\), where \\(u_t\\) - white noise, \\(u_t \\sim \\mathcal{N}(0, \\sigma^2)\\) Naive Model (Random Walk) \\(y_t = y_{t-1} + u_t\\), where \\(u_t\\) - white noise, \\(u_t \\sim \\mathcal{N}(0, \\sigma^2)\\), \\(y_1\\) is known. Seasonal Random Walk \\(y_t = y_{t-12} + u_t\\), where \\(u_t\\) - white noise, \\(u_t \\sim \\mathcal{N}(0, \\sigma^2)\\), \\(y_1, ..., y_{11}\\) are known. 1.6 Examples 1.6.1 Time series from scratch Load libraries. # loading libraries library(tidyverse) library(fpp3) Create time series from scratch. set.seed(777) n_obs &lt;- 120 two &lt;- tsibble(date = yearmonth(ymd(&#39;2010-01-01&#39;) + months(0: (n_obs - 1))), iid = rnorm(n_obs, mean = 10, sd = 4), rwalk = 10 + cumsum(rnorm(n_obs, mean = 0, sd = 1)), index = date) two ## # A tsibble: 120 x 3 [1M] ## date iid rwalk ## &lt;mth&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2010 Jan 12.0 10.3 ## 2 2010 Feb 8.41 9.33 ## 3 2010 Mar 12.0 8.19 ## 4 2010 Apr 8.40 8.03 ## 5 2010 May 16.6 7.31 ## 6 2010 Jun 12.5 7.99 ## 7 2010 Jul 10.8 8.50 ## 8 2010 Aug 14.4 9.33 ## 9 2010 Sep 9.18 10.8 ## 10 2010 Oct 8.48 12.4 ## # ℹ 110 more rows Have a look at the data. two |&gt; autoplot(iid) + xlab(&#39;Date&#39;) + ylab(&#39;IID&#39;) + ggtitle(&#39;Independent observations&#39;) two |&gt; autoplot(rwalk) + xlab(&#39;Date&#39;) + ylab(&#39;rwalk&#39;) + ggtitle(&#39;Random walk&#39;) Seasonal plots. two |&gt; gg_season(rwalk) two |&gt; gg_subseries(rwalk) # random walk two |&gt; gg_lag(rwalk) # independent observations two |&gt; gg_lag(iid) two |&gt; gg_tsdisplay(rwalk, plot_type = &#39;season&#39;) 1.6.2 Time Series data cleaning Libraries loading # loading libs library(tidyverse) library(fpp3) library(rio) Data Loading d &lt;- import(paste0(getwd(), &#39;/00_data/rf_marriage.xlsx&#39;), skip = 2) head(d) ## Классификатор объектов административно-территориального деления (ОКАТО) Единица измерения Период 2006 2007 2008 2009 2010 2011 2012 ## 1 643 Российская Федерация 642 единица 115 январь 55509 59495 58668 65507 62980 57949 55008 ## 2 643 Российская Федерация 642 единица 114 февраль 62449 68255 68195 81024 64855 68897 69384 ## 3 643 Российская Федерация 642 единица M01_02 январь-февраль 117958 127750 126863 146531 127835 126846 124392 ## 4 643 Российская Федерация 642 единица 68 март 70798 68173 85275 65250 58124 73713 62912 ## 5 643 Российская Федерация 642 единица 122 январь-март 188756 195923 212138 211781 185959 200559 187304 ## 6 643 Российская Федерация 642 единица 61 апрель 86055 106800 70528 98242 121953 93631 97401 ## 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 ## 1 56123 59291 58050 48523 50940 49005 45259 41233 47328 41675 43990 40799 ## 2 66604 77817 67918 55748 63581 52972 49792 65799 52021 61158 47537 47165 ## 3 122727 137108 125968 104271 114521 101977 95051 107032 99349 102833 91527 87964 ## 4 95343 70717 57537 64867 59183 56637 65253 49667 62088 56438 63539 56778 ## 5 218070 207825 183505 169138 173704 158614 160304 156699 161437 159271 155066 144742 ## 6 67605 93571 97256 58968 84361 79258 56818 33787 59499 69061 64794 65473 glimpse(d) ## Rows: 2,507 ## Columns: 22 ## $ `Классификатор объектов административно-территориального деления (ОКАТО)` &lt;chr&gt; &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерац… ## $ `Единица измерения` &lt;chr&gt; &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642… ## $ Период &lt;chr&gt; &quot;115 январь&quot;, &quot;114 февраль&quot;, &quot;M01_02 январь-февраль&quot;, &quot;68 март&quot;, &quot;122 январь-ма… ## $ `2006` &lt;dbl&gt; 55509, 62449, 117958, 70798, 188756, 86055, 274811, 35960, 310771, 111409, 4221… ## $ `2007` &lt;dbl&gt; 59495, 68255, 127750, 68173, 195923, 106800, 302723, 39331, 342054, 119012, 461… ## $ `2008` &lt;dbl&gt; 58668, 68195, 126863, 85275, 212138, 70528, 282666, 52634, 335300, 119283, 4545… ## $ `2009` &lt;dbl&gt; 65507, 81024, 146531, 65250, 211781, 98242, 310023, 45622, 355645, 118230, 4738… ## $ `2010` &lt;dbl&gt; 62980, 64855, 127835, 58124, 185959, 121953, 307912, 41339, 349251, 113994, 463… ## $ `2011` &lt;dbl&gt; 57949, 68897, 126846, 73713, 200559, 93631, 294190, 46364, 340554, 132709, 4732… ## $ `2012` &lt;dbl&gt; 55008, 69384, 124392, 62912, 187304, 97401, 284705, 45128, 329833, 137667, 4675… ## $ `2013` &lt;dbl&gt; 56123, 66604, 122727, 95343, 218070, 67605, 285675, 49712, 335387, 146512, 4818… ## $ `2014` &lt;dbl&gt; 59291, 77817, 137108, 70717, 207825, 93571, 301396, 53922, 355318, 128954, 4842… ## $ `2015` &lt;dbl&gt; 58050, 67918, 125968, 57537, 183505, 97256, 280761, 47687, 328448, 114524, 4429… ## $ `2016` &lt;dbl&gt; 48523, 55748, 104271, 64867, 169138, 58968, 228106, 47334, 275440, 114936, 3903… ## $ `2017` &lt;dbl&gt; 50940, 63581, 114521, 59183, 173704, 84361, 258065, 40851, 298916, 111901, 4108… ## $ `2018` &lt;dbl&gt; 49005, 52972, 101977, 56637, 158614, 79258, 237872, 39756, 277628, 103451, 3810… ## $ `2019` &lt;dbl&gt; 45259, 49792, 95051, 65253, 160304, 56818, 217122, 43531, 260653, 104709, 36536… ## $ `2020` &lt;dbl&gt; 41233, 65799, 107032, 49667, 156699, 33787, 190486, 15074, 205560, 68408, 27396… ## $ `2021` &lt;dbl&gt; 47328, 52021, 99349, 62088, 161437, 59499, 220936, 46596, 267532, 100908, 36844… ## $ `2022` &lt;dbl&gt; 41675, 61158, 102833, 56438, 159271, 69061, 228332, 44302, 272634, 96722, 36935… ## $ `2023` &lt;dbl&gt; 43990, 47537, 91527, 63539, 155066, 64794, 219860, 45499, 265359, 105701, 37106… ## $ `2024` &lt;dbl&gt; 40799, 47165, 87964, 56778, 144742, 65473, 210215, 51382, 261597, NA, NA, NA, N… Data cleaning colnames(d)[1:3] &lt;- c(&#39;region&#39;, &#39;unit&#39;, &#39;period&#39;) glimpse(d) ## Rows: 2,507 ## Columns: 22 ## $ region &lt;chr&gt; &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Р… ## $ unit &lt;chr&gt; &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единица&quot;, &quot;642 единиц… ## $ period &lt;chr&gt; &quot;115 январь&quot;, &quot;114 февраль&quot;, &quot;M01_02 январь-февраль&quot;, &quot;68 март&quot;, &quot;122 январь-март&quot;, &quot;61 апрель&quot;, &quot;117 январь-апрель&quot;, &quot;67 май&quot;, &quot;121 январь-май&quot;, … ## $ `2006` &lt;dbl&gt; 55509, 62449, 117958, 70798, 188756, 86055, 274811, 35960, 310771, 111409, 422180, 127475, 549655, 149120, 698775, 151116, 849891, 95192, 945083, … ## $ `2007` &lt;dbl&gt; 59495, 68255, 127750, 68173, 195923, 106800, 302723, 39331, 342054, 119012, 461066, 147253, 608319, 163630, 771949, 152696, 924645, 108414, 103305… ## $ `2008` &lt;dbl&gt; 58668, 68195, 126863, 85275, 212138, 70528, 282666, 52634, 335300, 119283, 454583, 125496, 580079, 192591, 772670, 129196, 901866, 107600, 1009466… ## $ `2009` &lt;dbl&gt; 65507, 81024, 146531, 65250, 211781, 98242, 310023, 45622, 355645, 118230, 473875, 138227, 612102, 164684, 776786, 141188, 917974, 113820, 1031794… ## $ `2010` &lt;dbl&gt; 62980, 64855, 127835, 58124, 185959, 121953, 307912, 41339, 349251, 113994, 463245, 164233, 627478, 153402, 780880, 143937, 924817, 122144, 104696… ## $ `2011` &lt;dbl&gt; 57949, 68897, 126846, 73713, 200559, 93631, 294190, 46364, 340554, 132709, 473263, 162556, 635819, 157766, 793585, 168510, 962095, 121711, 1083806… ## $ `2012` &lt;dbl&gt; 55008, 69384, 124392, 62912, 187304, 97401, 284705, 45128, 329833, 137667, 467500, 144355, 611855, 168085, 779940, 152328, 932268, 100937, 1033205… ## $ `2013` &lt;dbl&gt; 56123, 66604, 122727, 95343, 218070, 67605, 285675, 49712, 335387, 146512, 481899, 141354, 623253, 181745, 804998, 144512, 949510, 102743, 1052253… ## $ `2014` &lt;dbl&gt; 59291, 77817, 137108, 70717, 207825, 93571, 301396, 53922, 355318, 128954, 484272, 139684, 623956, 176269, 800225, 134342, 934567, 106211, 1040778… ## $ `2015` &lt;dbl&gt; 58050, 67918, 125968, 57537, 183505, 97256, 280761, 47687, 328448, 114524, 442972, 142572, 585544, 160667, 746211, 131936, 878147, 104838, 982985,… ## $ `2016` &lt;dbl&gt; 48523, 55748, 104271, 64867, 169138, 58968, 228106, 47334, 275440, 114936, 390376, 138733, 529109, 131756, 660865, 115462, 776327, 82752, 859079, … ## $ `2017` &lt;dbl&gt; 50940, 63581, 114521, 59183, 173704, 84361, 258065, 40851, 298916, 111901, 410817, 150368, 561185, 138775, 699960, 125720, 825680, 80249, 905929, … ## $ `2018` &lt;dbl&gt; 49005, 52972, 101977, 56637, 158614, 79258, 237872, 39756, 277628, 103451, 381079, 114416, 495495, 149966, 645461, 113178, 758639, 44413, 803052, … ## $ `2019` &lt;dbl&gt; 45259, 49792, 95051, 65253, 160304, 56818, 217122, 43531, 260653, 104709, 365362, 112845, 478207, 133217, 611424, 107033, 718457, 82727, 801184, 7… ## $ `2020` &lt;dbl&gt; 41233, 65799, 107032, 49667, 156699, 33787, 190486, 15074, 205560, 68408, 273968, 94393, 368361, 116921, 485282, 95794, 581076, 81188, 662264, 543… ## $ `2021` &lt;dbl&gt; 47328, 52021, 99349, 62088, 161437, 59499, 220936, 46596, 267532, 100908, 368440, 125068, 493508, 120961, 614469, 102528, 716997, 82679, 799676, 6… ## $ `2022` &lt;dbl&gt; 41675, 61158, 102833, 56438, 159271, 69061, 228332, 44302, 272634, 96722, 369356, 122660, 492016, 116404, 608420, 133021, 741441, 127250, 868691, … ## $ `2023` &lt;dbl&gt; 43990, 47537, 91527, 63539, 155066, 64794, 219860, 45499, 265359, 105701, 371060, 120668, 491728, 123562, 615290, 108981, 724271, 76096, 800367, 6… ## $ `2024` &lt;dbl&gt; 40799, 47165, 87964, 56778, 144742, 65473, 210215, 51382, 261597, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 10552, 12696, 23248, 146… d$period |&gt; unique() ## [1] &quot;115 январь&quot; &quot;114 февраль&quot; &quot;M01_02 январь-февраль&quot; &quot;68 март&quot; &quot;122 январь-март&quot; &quot;61 апрель&quot; ## [7] &quot;117 январь-апрель&quot; &quot;67 май&quot; &quot;121 январь-май&quot; &quot;66 июнь&quot; &quot;120 январь-июнь&quot; &quot;65 июль&quot; ## [13] &quot;119 январь-июль&quot; &quot;60 август&quot; &quot;116 январь-август&quot; &quot;108 сентябрь&quot; &quot;125 январь-сентябрь&quot; &quot;105 октябрь&quot; ## [19] &quot;124 январь-октябрь&quot; &quot;104 ноябрь&quot; &quot;123 январь-ноябрь&quot; &quot;62 декабрь&quot; &quot;118 январь-декабрь&quot; nchar(d$period |&gt; unique()) ## [1] 10 11 21 7 15 9 17 6 14 7 15 7 15 9 17 12 19 11 18 10 17 10 18 d2 &lt;- d |&gt; filter(nchar(period) &lt; 13) d2$period |&gt; unique() ## [1] &quot;115 январь&quot; &quot;114 февраль&quot; &quot;68 март&quot; &quot;61 апрель&quot; &quot;67 май&quot; &quot;66 июнь&quot; &quot;65 июль&quot; &quot;60 август&quot; &quot;108 сентябрь&quot; &quot;105 октябрь&quot; ## [11] &quot;104 ноябрь&quot; &quot;62 декабрь&quot; month_dict &lt;- tibble(period = unique(d2$period), month = 1:12) month_dict ## # A tibble: 12 × 2 ## period month ## &lt;chr&gt; &lt;int&gt; ## 1 115 январь 1 ## 2 114 февраль 2 ## 3 68 март 3 ## 4 61 апрель 4 ## 5 67 май 5 ## 6 66 июнь 6 ## 7 65 июль 7 ## 8 60 август 8 ## 9 108 сентябрь 9 ## 10 105 октябрь 10 ## 11 104 ноябрь 11 ## 12 62 декабрь 12 d3 &lt;- d2 |&gt; left_join(month_dict, by = &#39;period&#39;) head(d3) ## region unit period 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 ## 1 643 Российская Федерация 642 единица 115 январь 55509 59495 58668 65507 62980 57949 55008 56123 59291 58050 48523 50940 49005 45259 41233 47328 ## 2 643 Российская Федерация 642 единица 114 февраль 62449 68255 68195 81024 64855 68897 69384 66604 77817 67918 55748 63581 52972 49792 65799 52021 ## 3 643 Российская Федерация 642 единица 68 март 70798 68173 85275 65250 58124 73713 62912 95343 70717 57537 64867 59183 56637 65253 49667 62088 ## 4 643 Российская Федерация 642 единица 61 апрель 86055 106800 70528 98242 121953 93631 97401 67605 93571 97256 58968 84361 79258 56818 33787 59499 ## 5 643 Российская Федерация 642 единица 67 май 35960 39331 52634 45622 41339 46364 45128 49712 53922 47687 47334 40851 39756 43531 15074 46596 ## 6 643 Российская Федерация 642 единица 66 июнь 111409 119012 119283 118230 113994 132709 137667 146512 128954 114524 114936 111901 103451 104709 68408 100908 ## 2022 2023 2024 month ## 1 41675 43990 40799 1 ## 2 61158 47537 47165 2 ## 3 56438 63539 56778 3 ## 4 69061 64794 65473 4 ## 5 44302 45499 51382 5 ## 6 96722 105701 NA 6 d4 &lt;- d3 |&gt; select(-unit, -period) head(d4) ## region 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 month ## 1 643 Российская Федерация 55509 59495 58668 65507 62980 57949 55008 56123 59291 58050 48523 50940 49005 45259 41233 47328 41675 43990 40799 1 ## 2 643 Российская Федерация 62449 68255 68195 81024 64855 68897 69384 66604 77817 67918 55748 63581 52972 49792 65799 52021 61158 47537 47165 2 ## 3 643 Российская Федерация 70798 68173 85275 65250 58124 73713 62912 95343 70717 57537 64867 59183 56637 65253 49667 62088 56438 63539 56778 3 ## 4 643 Российская Федерация 86055 106800 70528 98242 121953 93631 97401 67605 93571 97256 58968 84361 79258 56818 33787 59499 69061 64794 65473 4 ## 5 643 Российская Федерация 35960 39331 52634 45622 41339 46364 45128 49712 53922 47687 47334 40851 39756 43531 15074 46596 44302 45499 51382 5 ## 6 643 Российская Федерация 111409 119012 119283 118230 113994 132709 137667 146512 128954 114524 114936 111901 103451 104709 68408 100908 96722 105701 NA 6 d5 &lt;- d4 |&gt; pivot_longer(cols = `2006`:`2024`, names_to = &#39;year&#39;, values_to = &#39;total&#39;) head(d5) ## # A tibble: 6 × 4 ## region month year total ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 643 Российская Федерация 1 2006 55509 ## 2 643 Российская Федерация 1 2007 59495 ## 3 643 Российская Федерация 1 2008 58668 ## 4 643 Российская Федерация 1 2009 65507 ## 5 643 Российская Федерация 1 2010 62980 ## 6 643 Российская Федерация 1 2011 57949 glimpse(d5) ## Rows: 24,852 ## Columns: 4 ## $ region &lt;chr&gt; &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Р… ## $ month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,… ## $ year &lt;chr&gt; &quot;2006&quot;, &quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot;, &quot;2013&quot;, &quot;2014&quot;, &quot;2015&quot;, &quot;2016&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2… ## $ total &lt;dbl&gt; 55509, 59495, 58668, 65507, 62980, 57949, 55008, 56123, 59291, 58050, 48523, 50940, 49005, 45259, 41233, 47328, 41675, 43990, 40799, 62449, 68255,… d6 &lt;- d5 |&gt; mutate(date = yearmonth(paste0(year, &#39;-&#39;, month))) glimpse(d6) ## Rows: 24,852 ## Columns: 5 ## $ region &lt;chr&gt; &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Российская Федерация&quot;, &quot;643 Р… ## $ month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,… ## $ year &lt;chr&gt; &quot;2006&quot;, &quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot;, &quot;2013&quot;, &quot;2014&quot;, &quot;2015&quot;, &quot;2016&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;2… ## $ total &lt;dbl&gt; 55509, 59495, 58668, 65507, 62980, 57949, 55008, 56123, 59291, 58050, 48523, 50940, 49005, 45259, 41233, 47328, 41675, 43990, 40799, 62449, 68255,… ## $ date &lt;mth&gt; 2006 Jan, 2007 Jan, 2008 Jan, 2009 Jan, 2010 Jan, 2011 Jan, 2012 Jan, 2013 Jan, 2014 Jan, 2015 Jan, 2016 Jan, 2017 Jan, 2018 Jan, 2019 Jan, 2020 J… d7 &lt;- d6 |&gt; separate(region, into = c(&#39;code&#39;, &#39;name&#39;), sep = &#39; &#39;, extra = &#39;merge&#39;) glimpse(d7) ## Rows: 24,852 ## Columns: 6 ## $ code &lt;chr&gt; &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, … ## $ name &lt;chr&gt; &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Ро… ## $ month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, … ## $ year &lt;chr&gt; &quot;2006&quot;, &quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot;, &quot;2013&quot;, &quot;2014&quot;, &quot;2015&quot;, &quot;2016&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;, &quot;20… ## $ total &lt;dbl&gt; 55509, 59495, 58668, 65507, 62980, 57949, 55008, 56123, 59291, 58050, 48523, 50940, 49005, 45259, 41233, 47328, 41675, 43990, 40799, 62449, 68255, … ## $ date &lt;mth&gt; 2006 Jan, 2007 Jan, 2008 Jan, 2009 Jan, 2010 Jan, 2011 Jan, 2012 Jan, 2013 Jan, 2014 Jan, 2015 Jan, 2016 Jan, 2017 Jan, 2018 Jan, 2019 Jan, 2020 Ja… d8 &lt;- d7 |&gt; select(-month, - year) glimpse(d8) ## Rows: 24,852 ## Columns: 4 ## $ code &lt;chr&gt; &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, &quot;643&quot;, … ## $ name &lt;chr&gt; &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Российская Федерация&quot;, &quot;Ро… ## $ total &lt;dbl&gt; 55509, 59495, 58668, 65507, 62980, 57949, 55008, 56123, 59291, 58050, 48523, 50940, 49005, 45259, 41233, 47328, 41675, 43990, 40799, 62449, 68255, … ## $ date &lt;mth&gt; 2006 Jan, 2007 Jan, 2008 Jan, 2009 Jan, 2010 Jan, 2011 Jan, 2012 Jan, 2013 Jan, 2014 Jan, 2015 Jan, 2016 Jan, 2017 Jan, 2018 Jan, 2019 Jan, 2020 Ja… marriages &lt;- as_tsibble(d8, index = date, key = c(&#39;code&#39;, &#39;name&#39;)) marriages ## # A tsibble: 24,852 x 4 [1M] ## # Key: code, name [109] ## code name total date ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;mth&gt; ## 1 01000000000 Алтайский край 953 2006 Jan ## 2 01000000000 Алтайский край 1007 2006 Feb ## 3 01000000000 Алтайский край 1311 2006 Mar ## 4 01000000000 Алтайский край 1554 2006 Apr ## 5 01000000000 Алтайский край 562 2006 May ## 6 01000000000 Алтайский край 1900 2006 Jun ## 7 01000000000 Алтайский край 2338 2006 Jul ## 8 01000000000 Алтайский край 3034 2006 Aug ## 9 01000000000 Алтайский край 2460 2006 Sep ## 10 01000000000 Алтайский край 1762 2006 Oct ## # ℹ 24,842 more rows # plot the data marriages |&gt; filter(code == 643) |&gt; autoplot() ## Plot variable not specified, automatically selected `.vars = total` ## Warning: Removed 7 rows containing missing values or values outside the scale range (`geom_line()`). marriages |&gt; mutate(date = as.Date(date)) |&gt; export(paste0(getwd(), &#39;/00_data/marriages.csv&#39;)) m &lt;- import(paste0(getwd(), &#39;/00_data/marriages.csv&#39;)) glimpse(m) ## Rows: 24,852 ## Columns: 4 ## $ code &lt;int64&gt; 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1… ## $ name &lt;chr&gt; &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Ал… ## $ total &lt;int&gt; 953, 1007, 1311, 1554, 562, 1900, 2338, 3034, 2460, 1762, 1411, 1554, 1069, 1221, 1330, 1774, 609, 2107, 2708, 3272, 2483, 1825, 1721, 1940, 1006, … ## $ date &lt;IDate&gt; 2006-01-01, 2006-02-01, 2006-03-01, 2006-04-01, 2006-05-01, 2006-06-01, 2006-07-01, 2006-08-01, 2006-09-01, 2006-10-01, 2006-11-01, 2006-12-01, 2… ts_marriages &lt;- m |&gt; mutate(date = yearmonth(date)) |&gt; as_tsibble(index = date, key = c(&#39;code&#39;, &#39;name&#39;)) glimpse(ts_marriages) ## Rows: 24,852 ## Columns: 4 ## Key: code, name [109] ## $ code &lt;int64&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 3… ## $ name &lt;chr&gt; &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный фе… ## $ total &lt;int&gt; 14845, 16414, 15753, 21803, 9384, 29571, 35691, 39263, 40480, 24137, 21207, 19009, 15433, 17430, 13878, 29703, 10529, 31572, 41328, 42609, 41779, 2… ## $ date &lt;mth&gt; 2006 Jan, 2006 Feb, 2006 Mar, 2006 Apr, 2006 May, 2006 Jun, 2006 Jul, 2006 Aug, 2006 Sep, 2006 Oct, 2006 Nov, 2006 Dec, 2007 Jan, 2007 Feb, 2007 Ma… head(ts_marriages) ## # A tsibble: 6 x 4 [1M] ## # Key: code, name [1] ## code name total date ## &lt;int64&gt; &lt;chr&gt; &lt;int&gt; &lt;mth&gt; ## 1 30 Центральный федеральный округ 14845 2006 Jan ## 2 30 Центральный федеральный округ 16414 2006 Feb ## 3 30 Центральный федеральный округ 15753 2006 Mar ## 4 30 Центральный федеральный округ 21803 2006 Apr ## 5 30 Центральный федеральный округ 9384 2006 May ## 6 30 Центральный федеральный округ 29571 2006 Jun ts_marriages |&gt; filter(code == 643) |&gt; gg_tsdisplay(total, plot_type = &#39;season&#39;) ## Warning: Removed 7 rows containing missing values or values outside the scale range (`geom_line()`). ## Warning: Removed 7 rows containing missing values or values outside the scale range (`geom_point()`). ## Warning: Removed 7 rows containing missing values or values outside the scale range (`geom_line()`). m_rf &lt;- ts_marriages |&gt; filter(code == 643) head(m_rf) ## # A tsibble: 6 x 4 [1M] ## # Key: code, name [1] ## code name total date ## &lt;int64&gt; &lt;chr&gt; &lt;int&gt; &lt;mth&gt; ## 1 643 Российская Федерация 55509 2006 Jan ## 2 643 Российская Федерация 62449 2006 Feb ## 3 643 Российская Федерация 70798 2006 Mar ## 4 643 Российская Федерация 86055 2006 Apr ## 5 643 Российская Федерация 35960 2006 May ## 6 643 Российская Федерация 111409 2006 Jun tail(m_rf, 10) ## # A tsibble: 10 x 4 [1M] ## # Key: code, name [1] ## code name total date ## &lt;int64&gt; &lt;chr&gt; &lt;int&gt; &lt;mth&gt; ## 1 643 Российская Федерация 56778 2024 Mar ## 2 643 Российская Федерация 65473 2024 Apr ## 3 643 Российская Федерация 51382 2024 May ## 4 643 Российская Федерация NA 2024 Jun ## 5 643 Российская Федерация NA 2024 Jul ## 6 643 Российская Федерация NA 2024 Aug ## 7 643 Российская Федерация NA 2024 Sep ## 8 643 Российская Федерация NA 2024 Oct ## 9 643 Российская Федерация NA 2024 Nov ## 10 643 Российская Федерация NA 2024 Dec m_rf_full &lt;- m_rf |&gt; filter(date &lt; ymd(&#39;2024-06-01&#39;)) ## Warning: There was 1 warning in `filter()`. ## ℹ In argument: `date &lt; ymd(&quot;2024-06-01&quot;)`. ## Caused by warning: ## ! Incompatible methods (&quot;&lt;.vctrs_vctr&quot;, &quot;&lt;.Date&quot;) for &quot;&lt;&quot; m_rf_full |&gt; gg_tsdisplay(total, plot_type = &#39;season&#39;) 4. Time Series Analysis stl_model &lt;- m_rf_full |&gt; model(decomp = STL(total ~ trend(window = 7) + season(window = 100))) components(stl_model) ## # A dable: 221 x 9 [1M] ## # Key: code, name, .model [1] ## # : total = trend + season_year + remainder ## code name .model date total trend season_year remainder season_adjust ## &lt;int64&gt; &lt;chr&gt; &lt;chr&gt; &lt;mth&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 643 Российская Федерация decomp 2006 Jan 55509 94148. -38464. -175. 93973. ## 2 643 Российская Федерация decomp 2006 Feb 62449 93714. -28148. -3116. 90597. ## 3 643 Российская Федерация decomp 2006 Mar 70798 92846. -25553. 3505. 96351. ## 4 643 Российская Федерация decomp 2006 Apr 86055 91970. -11524. 5608. 97579. ## 5 643 Российская Федерация decomp 2006 May 35960 89642. -47305. -6377. 83265. ## 6 643 Российская Федерация decomp 2006 Jun 111409 87064. 23080. 1265. 88329. ## 7 643 Российская Федерация decomp 2006 Jul 127475 89339. 43219. -5083. 84256. ## 8 643 Российская Федерация decomp 2006 Aug 149120 93710. 59269. -3859. 89851. ## 9 643 Российская Федерация decomp 2006 Sep 151116 95884. 39842. 15390. 111274. ## 10 643 Российская Федерация decomp 2006 Oct 95192 96999. 5812. -7619. 89380. ## # ℹ 211 more rows stl_model |&gt; components() |&gt; autoplot() m_rf_full |&gt; model(decomp = STL(total ~ trend(window = 100) + season(window = 100))) |&gt; components() |&gt; autoplot() m_rf_full |&gt; model(decomp = STL(total ~ trend(window = 100) + season(window = 5))) |&gt; components() |&gt; autoplot() Time series features marr_features &lt;- ts_marriages |&gt; features(total, features = feat_stl) ## Warning: 1 error encountered for feature 1 ## [1] series is not periodic or has less than two periods glimpse(marr_features) ## Rows: 109 ## Columns: 11 ## $ code &lt;int64&gt; 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 643, 1000000000, 3000000000, 4000000000, 4100000000, 4130000000, 5000000000,… ## $ name &lt;chr&gt; &quot;Центральный федеральный округ&quot;, &quot;Северо-Западный федеральный округ&quot;, &quot;Южный федеральный округ (по 2009 год)&quot;, &quot;Приволжский федера… ## $ trend_strength &lt;dbl&gt; 0.4745444, 0.6401144, 0.2735227, 0.6898244, 0.6726793, 0.8879235, 0.8977269, 0.3769994, 0.8598947, NA, 0.3462742, 0.4152795, 0.350… ## $ seasonal_strength_year &lt;dbl&gt; 0.9104450, 0.9402161, 0.9143495, 0.9274390, 0.9170236, 0.9279884, 0.9232011, 0.9152458, 0.8603297, NA, 0.8763794, 0.8881947, 0.709… ## $ seasonal_peak_year &lt;dbl&gt; 8, 8, 9, 8, 8, 8, 8, 9, 8, NA, 9, 7, 9, 8, 8, 9, 8, 4, 7, 9, 9, 8, 8, 8, 8, 0, 9, 8, 8, 8, 9, 8, 8, 8, 8, 8, 7, 3, 8, 8, 8, 9, 0, … ## $ seasonal_trough_year &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, NA, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 9, 5, 5, 5, 5, 5, … ## $ spikiness &lt;dbl&gt; 5.800426e+09, 4.480502e+07, 5.464045e+09, 1.368004e+09, 4.204206e+07, 7.158124e+08, 7.523537e+06, 4.923785e+08, 5.955185e+06, NA, … ## $ linearity &lt;dbl&gt; -2.762647e+04, -9.940055e+03, 1.537425e+03, -3.859673e+04, -1.434080e+04, -3.124289e+04, -9.716159e+03, -5.521401e+03, -1.387037e+… ## $ curvature &lt;dbl&gt; -6218.202397, -3926.339624, -4222.782950, -8211.754292, -2541.293495, -28907.276985, -9743.252883, -4522.012404, 1131.403734, NA, … ## $ stl_e_acf1 &lt;dbl&gt; -0.1485399418, 0.1760381438, -0.3645523140, -0.2103411578, -0.0160823966, 0.0220078173, -0.0922420573, -0.2896106342, 0.0265822139… ## $ stl_e_acf10 &lt;dbl&gt; 0.21015807, 0.22301008, 0.66946204, 0.21063083, 0.21637186, 0.19238858, 0.17854895, 0.29795679, 0.09421211, NA, 0.22297834, 0.5031… library(ggrepel) ggplot(marr_features, aes(x = trend_strength, y = seasonal_strength_year, label=name)) + geom_point() + geom_text_repel() "],["exponential-smoothing-models.html", "Chapter 2 Exponential smoothing models 2.1 ETS(ANN) model 2.2 ETS(AAN) model 2.3 ETS(AAA) model 2.4 Model selection 2.5 Examples", " Chapter 2 Exponential smoothing models library(tidyverse) library(fpp3) library(ggplot2) library(rio) m &lt;- import(paste0(getwd(), &#39;/00_data/marriages.csv&#39;)) glimpse(m) ## Rows: 24,852 ## Columns: 4 ## $ code &lt;int64&gt; 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1… ## $ name &lt;chr&gt; &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Ал… ## $ total &lt;int&gt; 953, 1007, 1311, 1554, 562, 1900, 2338, 3034, 2460, 1762, 1411, 1554, 1069, 1221, 1330, 1774, 609, 2107, 2708, 3272, 2483, 1825, 1721, 1940, 1006, … ## $ date &lt;IDate&gt; 2006-01-01, 2006-02-01, 2006-03-01, 2006-04-01, 2006-05-01, 2006-06-01, 2006-07-01, 2006-08-01, 2006-09-01, 2006-10-01, 2006-11-01, 2006-12-01, 2… ts_marriages &lt;- m |&gt; mutate(date = yearmonth(date)) |&gt; as_tsibble(index = date, key = c(&#39;code&#39;, &#39;name&#39;)) glimpse(ts_marriages) ## Rows: 24,852 ## Columns: 4 ## Key: code, name [109] ## $ code &lt;int64&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 3… ## $ name &lt;chr&gt; &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный фе… ## $ total &lt;int&gt; 14845, 16414, 15753, 21803, 9384, 29571, 35691, 39263, 40480, 24137, 21207, 19009, 15433, 17430, 13878, 29703, 10529, 31572, 41328, 42609, 41779, 2… ## $ date &lt;mth&gt; 2006 Jan, 2006 Feb, 2006 Mar, 2006 Apr, 2006 May, 2006 Jun, 2006 Jul, 2006 Aug, 2006 Sep, 2006 Oct, 2006 Nov, 2006 Dec, 2007 Jan, 2007 Feb, 2007 Ma… 2.1 ETS(ANN) model ETS - Error, Trend, Seasonality. ANN - Additive error, No trend, No seasonality. \\(y_t\\) - observed time series \\(l_t\\) - trend, cleaned time series \\(u_t\\) - random error \\[ y_t = l_{t-1} + u_t \\] Assume \\(l_t = l_{t-1} + \\alpha u_t\\), \\(l_0\\) - start value. \\(u_t \\sim \\mathcal{N}(0,\\,\\sigma^{2})\\) and independent. Parameters of the model: \\(\\alpha, \\sigma^2, l_0\\). \\[ \\begin{cases} y_t = l_{t-1} + u_t \\\\ l_t = l_{t-1} + \\alpha u_t, l_0 - \\text {start value} \\\\ u_t \\sim \\mathcal{N}(0,\\,\\sigma^{2}) \\text { and independent} \\end{cases} \\] 2.1.1 Forecast One-step forecast \\[ y_{T+1} = l_T + u_{T+1} \\] \\[ (y_{T+1}|\\mathcal{F_T}) \\sim \\mathcal{N}(l_T, \\sigma^2) \\] Two-step forecast \\[ y_{T+2} = l_{T+1} + u_{T+2} = l_T + \\alpha u_{T+1} + u_{T+2} \\] \\[ (y_{T+2}|\\mathcal{F_T}) \\sim \\mathcal{N}(l_T, \\sigma^2(\\alpha^2 + 1)) \\] Predictive Interval \\[ [\\hat l_T - 1.96\\hat\\sigma\\sqrt{\\hat\\alpha^2+1}; \\hat l_T + 1.96\\hat\\sigma\\sqrt{\\hat\\alpha^2+1}] \\] Simple exponential smoothing \\[ \\begin{cases} y_t = l_{t-1} + u_t \\\\ l_t = l_{t-1} + \\alpha u_t, l_0 - \\text {start value} \\end{cases} \\] \\[ l_t = l_{t-1} + \\alpha(y_t-l_{t-1}) = \\alpha y_t + (1-\\alpha)l_{t-1} \\] \\[ \\hat l_1 = y_1 \\] \\[ \\hat l_t = \\alpha y_t + (1-\\alpha)\\hat l_{t-1} \\] \\[ \\min_{\\alpha} \\sum (y_t - \\hat l_t)^2 \\] 2.1.2 Example rf_m &lt;- ts_marriages |&gt; filter(code == 643, !is.na(total), yearmonth(date) &gt;= yearmonth(&#39;2017 JAN&#39;), yearmonth(date) &lt;= yearmonth(&#39;2020 JAN&#39;)) # ETS(ANN) rf_m |&gt; filter(date &lt; yearmonth(&#39;2019 Feb&#39;)) |&gt; model(ETS(total ~ error(&#39;A&#39;) + trend(&#39;N&#39;) + season(&#39;N&#39;))) |&gt; forecast(rf_m |&gt; filter(date &gt;= yearmonth(&#39;2019 Feb&#39;)), h=12) |&gt; autoplot(rf_m) + labs(title = &#39;ETS(ANN)&#39;) ## Warning: Input forecast horizon `h` will be ignored as `new_data` has been provided. 2.2 ETS(AAN) model ETS - Error, Trend, Seasonality. AAN - Additive error, Additive trend, No seasonality. \\(y_t\\) - observed time series \\(l_t\\) - trend, cleaned time series \\(b_t\\) - current speed of growth cleaned time series \\(u_t\\) - random error \\[ \\begin{cases} y_t = l_{t-1} + b_{t-1} + u_t \\\\ l_t = l_{t-1} + b_{t-1} + \\alpha u_t, l_0 - \\text {start value} \\\\ u_t \\sim \\mathcal{N}(0,\\,\\sigma^{2}) \\text { and independent} \\\\ b_t = b_{t-1} + \\beta u_t, \\beta_0 - \\text {start value} \\end{cases} \\] Parameters of the model: \\(\\alpha, \\beta, \\sigma^2, l_0, b_0\\). 2.2.1 Forecast One-step forecast \\[ y_{T+1} = l_T + b_T + u_{T+1} \\] \\[ (y_{T+1}|\\mathcal{F_T}) \\sim \\mathcal{N}(l_T + b_T, \\sigma^2) \\] Two-step forecast \\[ y_{T+2} = l_{T+1} + b_{T+1} + u_{T+2} = (l_T + b_T+ \\alpha u_{T+1}) + (b_T + \\beta u_{T+1}) + u_{T+2} \\] \\[ (y_{T+2}|\\mathcal{F_T}) \\sim \\mathcal{N}(l_T + 2b_T, \\sigma^2((\\alpha + \\beta)^2 + 1)) \\] 2.2.2 Example # ETS(AAN) rf_m |&gt; filter(date &lt; yearmonth(&#39;2019 Feb&#39;)) |&gt; model(ETS(total ~ error(&#39;A&#39;) + trend(&#39;A&#39;) + season(&#39;N&#39;))) |&gt; forecast(rf_m |&gt; filter(date &gt;= yearmonth(&#39;2019 Feb&#39;)), h=12) |&gt; autoplot(rf_m) + labs(title = &#39;ETS(AAN)&#39;) ## Warning: Input forecast horizon `h` will be ignored as `new_data` has been provided. 2.3 ETS(AAA) model ETS - Error, Trend, Seasonality. AAA - Additive error, Additive trend, Additive seasonality. \\(y_t\\) - observed time series \\(l_t\\) - trend, cleaned time series \\(b_t\\) - current speed of growth cleaned time series \\(s_t\\) - seasonal component \\(u_t\\) - random error \\[ \\begin{cases} y_t = l_{t-1} + b_{t-1} + s_{t-m} + u_t, m - \\text{seasonal period} \\\\ l_t = l_{t-1} + b_{t-1} + \\alpha u_t, l_0 - \\text {start value} \\\\ u_t \\sim \\mathcal{N}(0,\\,\\sigma^{2}) \\text { and independent} \\\\ b_t = b_{t-1} + \\beta u_t, \\beta_0 - \\text {start value} \\\\ s_t = s_{t-m} + \\gamma u_t, s_0, s_{-1},..., s_{-(m-1)} - \\text{start values} \\end{cases} \\] Parameters of the model: \\(\\alpha, \\beta, \\gamma, \\sigma^2, l_0, b_0, s_0, s_{-1},...,s_{-(m-1)}\\). Limitation: \\(s_0 + s_{-1} + ... + s_{-(m-1)} = 0\\) 2.3.1 Forecast One-step forecast \\[ y_{T+1} = l_T + b_T + s_{T-11} + u_{T+1} \\] \\[ (y_{T+1}|\\mathcal{F_T}) \\sim \\mathcal{N}(l_T + b_T + s_{T-11}, \\sigma^2) \\] Two-step forecast \\[ y_{T+2} = l_{T+1} + b_{T+1} + s_{T-10} + u_{T+2} = (l_T + b_T+ \\alpha u_{T+1}) + (b_T + \\beta u_{T+1}) + s_{T-10} + u_{T+2} \\] \\[ (y_{T+2}|\\mathcal{F_T}) \\sim \\mathcal{N}(l_T + 2b_T + s_{T-10}, \\sigma^2((\\alpha + \\beta)^2 + 1)) \\] 2.3.2 Example # ETS(AAA) rf_m |&gt; filter(date &lt; yearmonth(&#39;2019 Feb&#39;)) |&gt; model(ETS(total ~ error(&#39;A&#39;) + trend(&#39;A&#39;) + season(&#39;A&#39;))) |&gt; forecast(rf_m |&gt; filter(date &gt;= yearmonth(&#39;2019 Feb&#39;)), h=12) |&gt; autoplot(rf_m) + labs(title = &#39;ETS(AAA)&#39;) ## Warning: Input forecast horizon `h` will be ignored as `new_data` has been provided. 2.4 Model selection Mean Absolute Error \\[ MAE = \\frac {|e_{T+1}| + |e_{T+2}|+...+ |e_{T+H}|}{H} \\] Root Mean Squared Error \\[ RMSE = \\sqrt {\\frac {e_{T+1}^2 + e_{T+2}^2+...+ e_{T+H}^2}{H}} \\] Mean Absolute Percentage Error \\[ e_{t+h} = y_{t+h} - \\hat y_{t+h} \\] \\[ p_t = e_t/y_t \\times 100 \\] \\[ MAPE = \\frac {|p_{T+1}| + |p_{T+2}| + ... + |p_{T+H}|} H \\] Symmetric Mean Absolute Percentage Error \\[ p_t^s = e_t/(0.5y_t + 0.5 \\hat y_t) \\times 100 \\] \\[ sMAPE = \\frac {|p_{T+1}^s| + |p_{T+2}^s| + ... + |p_{T+H}^s|} H \\] Mean Absolute Scaled Error \\[ \\hat y_t^{naive} = y_{t-1} \\] \\[ \\hat y_t^{naive} = y_{t-12} \\] \\[ q_t = \\frac {e_t}{MAE^{naive}} \\] \\[ MASE = \\frac {|q_{T+1}| + |q_{T+2}|+...+|q_{T+H}|}{H} \\] Akaike Information Criterion \\[ AIC = -2lnL + 3k \\] 2.5 Examples 2.5.1 Model selection by MSE glimpse(ts_marriages) ## Rows: 24,852 ## Columns: 4 ## Key: code, name [109] ## $ code &lt;int64&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 3… ## $ name &lt;chr&gt; &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный фе… ## $ total &lt;int&gt; 14845, 16414, 15753, 21803, 9384, 29571, 35691, 39263, 40480, 24137, 21207, 19009, 15433, 17430, 13878, 29703, 10529, 31572, 41328, 42609, 41779, 2… ## $ date &lt;mth&gt; 2006 Jan, 2006 Feb, 2006 Mar, 2006 Apr, 2006 May, 2006 Jun, 2006 Jul, 2006 Aug, 2006 Sep, 2006 Oct, 2006 Nov, 2006 Dec, 2007 Jan, 2007 Feb, 2007 Ma… rf_m &lt;- ts_marriages |&gt; filter(code == 643, !is.na(total)) rf_m |&gt; gg_tsdisplay() ## Plot variable not specified, automatically selected `y = total` train &lt;- rf_m |&gt; filter(date &lt; yearmonth(&#39;2022 Jan&#39;)) test &lt;- rf_m |&gt; anti_join(train, by = &#39;date&#39;) fits &lt;- train |&gt; model(snaive = SNAIVE(total), ets_aaa = ETS(total ~ error(&#39;A&#39;) + trend(&#39;A&#39;) + season(&#39;A&#39;)), ets_ana = ETS(total ~ error(&#39;A&#39;) + trend(&#39;N&#39;) + season(&#39;A&#39;))) fc &lt;- fits |&gt; forecast(h = &#39;2 years&#39;) rf_m |&gt; filter(date &gt;= yearmonth(&#39;2015 JAN&#39;)) |&gt; autoplot(total) + autolayer(fc |&gt; filter(.model %in% c(&#39;snaive&#39;, &#39;ets_aaa&#39;))) + facet_grid(.model ~ .) fc |&gt; accuracy(test) ## # A tibble: 3 × 12 ## .model code name .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;int64&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ets_aaa 643 Российская Федерация Test 12260. 19065. 14733. 17.2 19.3 NaN NaN 0.403 ## 2 ets_ana 643 Российская Федерация Test 10085. 17827. 13310. 14.3 17.1 NaN NaN 0.413 ## 3 snaive 643 Российская Федерация Test 6366. 15781. 10086. 5.48 11.4 NaN NaN 0.561 2.5.2 Model Averaging fits &lt;- train |&gt; model(snaive = SNAIVE(total), ets_aaa = ETS(total ~ error(&#39;A&#39;) + trend(&#39;A&#39;) + season(&#39;A&#39;)), ets_ana = ETS(total ~ error(&#39;A&#39;) + trend(&#39;N&#39;) + season(&#39;A&#39;)), ets_aaa_ln = ETS(log(total) ~ error(&#39;A&#39;) + trend(&#39;A&#39;) + season(&#39;A&#39;)), ets_ana_ln = ETS(log(total) ~ error(&#39;A&#39;) + trend(&#39;N&#39;) + season(&#39;A&#39;))) fc &lt;- fits |&gt; forecast(h = &#39;2 years&#39;) fc |&gt; accuracy(rf_m) ## # A tibble: 5 × 12 ## .model code name .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;int64&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ets_aaa 643 Российская Федерация Test 12260. 19065. 14733. 17.2 19.3 1.16 1.15 0.403 ## 2 ets_aaa_ln 643 Российская Федерация Test 9574. 16092. 10657. 10.8 12.3 0.843 0.974 0.512 ## 3 ets_ana 643 Российская Федерация Test 10085. 17827. 13310. 14.3 17.1 1.05 1.08 0.413 ## 4 ets_ana_ln 643 Российская Федерация Test 6326. 14987. 9674. 6.99 11.0 0.765 0.907 0.511 ## 5 snaive 643 Российская Федерация Test 6366. 15781. 10086. 5.48 11.4 0.798 0.955 0.561 # make combinations fits2 &lt;- fits |&gt; mutate(top2 = (ets_ana_ln + snaive)/2, top3 = (ets_ana_ln + snaive + ets_aaa_ln)/3) fits2 |&gt; forecast(h = &#39;2 years&#39;) |&gt; accuracy(rf_m) ## # A tibble: 7 × 12 ## .model code name .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;int64&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ets_aaa 643 Российская Федерация Test 12260. 19065. 14733. 17.2 19.3 1.16 1.15 0.403 ## 2 ets_aaa_ln 643 Российская Федерация Test 9574. 16092. 10657. 10.8 12.3 0.843 0.974 0.512 ## 3 ets_ana 643 Российская Федерация Test 10085. 17827. 13310. 14.3 17.1 1.05 1.08 0.413 ## 4 ets_ana_ln 643 Российская Федерация Test 6326. 14987. 9674. 6.99 11.0 0.765 0.907 0.511 ## 5 snaive 643 Российская Федерация Test 6366. 15781. 10086. 5.48 11.4 0.798 0.955 0.561 ## 6 top2 643 Российская Федерация Test 6346. 15029. 9176. 6.24 10.2 0.726 0.909 0.577 ## 7 top3 643 Российская Федерация Test 7422. 15219. 9284. 7.77 10.3 0.734 0.921 0.568 2.5.3 Cross-validation rf_m |&gt; nrow() ## [1] 221 rf_m_stretch &lt;- rf_m |&gt; stretch_tsibble(.init = 200, .step = 1) fits &lt;- rf_m_stretch |&gt; model(snaive = SNAIVE(total), ets_aaa = ETS(total ~ error(&#39;A&#39;) + trend(&#39;A&#39;) + season(&#39;A&#39;)), ets_ana = ETS(total ~ error(&#39;A&#39;) + trend(&#39;N&#39;) + season(&#39;A&#39;)), ets_aaa_ln = ETS(log(total) ~ error(&#39;A&#39;) + trend(&#39;A&#39;) + season(&#39;A&#39;)), ets_ana_ln = ETS(log(total) ~ error(&#39;A&#39;) + trend(&#39;N&#39;) + season(&#39;A&#39;))) fits |&gt; forecast(h = 1) |&gt; accuracy(rf_m) ## Warning: The future dataset is incomplete, incomplete out-of-sample data will be treated as missing. ## 1 observation is missing at 2024 Jun ## # A tibble: 5 × 12 ## .model code name .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;int64&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ets_aaa 643 Российская Федерация Test 1251. 16009. 11867. 0.102 14.8 0.941 0.947 0.526 ## 2 ets_aaa_ln 643 Российская Федерация Test 1068. 15350. 11553. -0.901 14.8 0.916 0.908 0.564 ## 3 ets_ana 643 Российская Федерация Test 2002. 15703. 11344. 1.28 14.1 0.900 0.929 0.518 ## 4 ets_ana_ln 643 Российская Федерация Test 385. 14567. 11041. -1.81 14.4 0.876 0.861 0.487 ## 5 snaive 643 Российская Федерация Test 1178. 22175. 14984. -1.79 17.7 1.19 1.31 0.683 fits2 &lt;- fits |&gt; mutate(top2 = (ets_ana_ln + ets_ana)/2) fits2 |&gt; forecast(h = 1) |&gt; accuracy(rf_m) ## Warning: The future dataset is incomplete, incomplete out-of-sample data will be treated as missing. ## 1 observation is missing at 2024 Jun ## # A tibble: 6 × 12 ## .model code name .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;int64&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ets_aaa 643 Российская Федерация Test 1251. 16009. 11867. 0.102 14.8 0.941 0.947 0.526 ## 2 ets_aaa_ln 643 Российская Федерация Test 1068. 15350. 11553. -0.901 14.8 0.916 0.908 0.564 ## 3 ets_ana 643 Российская Федерация Test 2002. 15703. 11344. 1.28 14.1 0.900 0.929 0.518 ## 4 ets_ana_ln 643 Российская Федерация Test 385. 14567. 11041. -1.81 14.4 0.876 0.861 0.487 ## 5 snaive 643 Российская Федерация Test 1178. 22175. 14984. -1.79 17.7 1.19 1.31 0.683 ## 6 top2 643 Российская Федерация Test 1193. 15043. 11158. -0.265 14.2 0.885 0.890 0.505 "],["ets-model-variations.html", "Chapter 3 ETS model variations 3.1 ETS(AAdN): damped trend 3.2 ETS(MNM): multiplicative components 3.3 ETS(MAdM): combinations 3.4 Examples", " Chapter 3 ETS model variations # Libraries loading library(tidyverse) library(fpp3) library(ggplot2) library(rio) # data loading m &lt;- import(paste0(getwd(), &#39;/00_data/marriages.csv&#39;)) glimpse(m) ## Rows: 24,852 ## Columns: 4 ## $ code &lt;int64&gt; 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1… ## $ name &lt;chr&gt; &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Ал… ## $ total &lt;int&gt; 953, 1007, 1311, 1554, 562, 1900, 2338, 3034, 2460, 1762, 1411, 1554, 1069, 1221, 1330, 1774, 609, 2107, 2708, 3272, 2483, 1825, 1721, 1940, 1006, … ## $ date &lt;IDate&gt; 2006-01-01, 2006-02-01, 2006-03-01, 2006-04-01, 2006-05-01, 2006-06-01, 2006-07-01, 2006-08-01, 2006-09-01, 2006-10-01, 2006-11-01, 2006-12-01, 2… ts_marriages &lt;- m |&gt; mutate(date = yearmonth(date)) |&gt; as_tsibble(index = date, key = c(&#39;code&#39;, &#39;name&#39;)) glimpse(ts_marriages) ## Rows: 24,852 ## Columns: 4 ## Key: code, name [109] ## $ code &lt;int64&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 3… ## $ name &lt;chr&gt; &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный фе… ## $ total &lt;int&gt; 14845, 16414, 15753, 21803, 9384, 29571, 35691, 39263, 40480, 24137, 21207, 19009, 15433, 17430, 13878, 29703, 10529, 31572, 41328, 42609, 41779, 2… ## $ date &lt;mth&gt; 2006 Jan, 2006 Feb, 2006 Mar, 2006 Apr, 2006 May, 2006 Jun, 2006 Jul, 2006 Aug, 2006 Sep, 2006 Oct, 2006 Nov, 2006 Dec, 2007 Jan, 2007 Feb, 2007 Ma… rf_m &lt;- ts_marriages |&gt; filter(code == 643, !is.na(total)) 3.1 ETS(AAdN): damped trend In an ETS model with a damped trend, a special coefficient is added to allow the trend’s growth or decline to slow down over time. This is useful when you expect that the trend will not continue to grow or decrease at the same rate indefinitely but instead will gradually slow down. A damping parameter \\(\\phi\\) is introduced, which lies between 0 and 1. This parameter controls how the trend slows down. - If \\(\\phi = 1\\), the trend remains additive (linear) and is not damped. - If \\(\\phi &lt; 1\\), the trend gradually reduces, slowing down over time. In an ETS(AAdN) model (Additive Error, Additive damped Trend, No Seasonality), the model is described as follows: \\[ \\begin{cases} y_t = \\ell_{t-1} + \\phi b _{t-1} + \\beta u_t \\\\ b_t = \\phi b _{t-1} + \\beta u_t, b_0 - \\text {start value} \\\\ l_t = \\ell_{t-1} + \\phi b _{t-1} + \\alpha u_t, \\ell_0 - \\text {start value} \\\\ u_t \\sim \\mathcal{N}(0,\\,\\sigma^{2}) \\text { and independent} \\end{cases} \\] Parameters: \\(\\alpha, \\sigma^2, \\ell_0, b_0, \\beta, \\phi\\) Forecast One-step forecast \\[ y_{T+1} = \\ell_T + \\phi b_T + u_{T+1} \\] \\[ (y_{T+1}|\\mathcal{F_T}) \\sim \\mathcal{N}(l_T + \\phi b_T, \\sigma^2) \\] Two-step forecast \\[ y_{T+2} = l_{T+1} + \\phi b_{T+1} + u_{T+2} = (l_T + \\phi b_T + \\alpha u_{T+1}) + \\phi(\\phi b_T + \\beta u_{T+1}) + u_{T+2} \\] \\[ (y_{T+2}|\\mathcal{F_T}) \\sim \\mathcal{N}(l_T + (\\phi + \\phi^2)b_T, \\sigma^2((\\alpha + \\phi \\beta)^2 + 1)) \\] Example rf_y &lt;- rf_m |&gt; index_by(year(date)) |&gt; summarize(total = sum(total)) |&gt; filter(`year(date)` &lt; 2021) rf_y|&gt; model(ETS(total ~ error(&#39;A&#39;) + trend(&#39;Ad&#39;) + season(&#39;N&#39;))) |&gt; forecast(h = 10) |&gt; autoplot(rf_y) + labs(title = &#39;ETS(AAdN): mariages in Russia&#39;, y = &#39;Mariages&#39;) 3.2 ETS(MNM): multiplicative components ETS - Error, Trend, Seasonality. MNM - Multiplicative error, No trend, Mo seasonality. \\[ \\begin{cases} y_t = l_{t-1} \\times s_{t-12} \\times (1 + u_t) \\\\ l_t = l_{t-1} \\times (1 + \\alpha u_t), l_0 - \\text {start value} \\\\ s_t = s_{t-12} \\times (1 + \\gamma u_t), s_0, ..., s_{-11} - \\text {start values} \\\\ u_t \\sim \\mathcal{N}(0,\\,\\sigma^{2}) \\text { and independent} \\end{cases} \\] \\(y_t\\) - observed value at time \\(t\\) \\(\\ell_t\\) - trend, or level at time \\(T\\) \\(s_t\\) - seasonal component \\(u_t\\) - random error Parameters Non-seasonal parameters: \\(\\alpha, \\sigma^2, l_0\\) Seasonal parameters: \\(\\gamma, s_0, s_{-1},..., s_{-11}\\) Limitation: \\(s_0 \\times s_{-1} \\times...\\times s_{-11} = 1\\) \\(y_t, \\ell_t\\) - original units \\(s_t, u_t\\) - fraction \\(s_t\\) is measured relative to one, for example, \\(s_t = 0.9\\) means it is 10% below the trend. \\(u_t\\) is measured relative to zero, for example, \\(u_t = -0.1\\) means a 10% decrease. Forecast One-step forecast \\[ y_{T+1} = l_T \\times s_{T-11} \\times (1 + u_{T+1}) \\] \\[ (y_{T+1}|\\mathcal{F_T}) \\sim \\mathcal{N}(\\ell_T \\times s_{T-11}, (\\ell_T \\times s_{T-11})^2\\sigma^2) \\] Two-step forecast \\[ y_{T+2} = l_{T+1} \\times s_{T-10} \\times (1+u_{T+2}) = l_T (1+ \\alpha u_{T+1}) \\times s_{T-10} \\times (1 + u_{T+2}) \\] Example fc1 &lt;- aus_production |&gt; filter(year(Quarter) &lt; 1970) |&gt; model(ETS(Electricity ~ error(&#39;M&#39;) + trend(&#39;N&#39;) + season(&#39;M&#39;))) |&gt; forecast(h = 16) fc2 &lt;- aus_production |&gt; filter(year(Quarter) &lt; 1980) |&gt; model(ETS(Electricity ~ error(&#39;M&#39;) + trend(&#39;N&#39;) + season(&#39;M&#39;))) |&gt; forecast(h = 16) aus_production |&gt; filter(year(Quarter) &lt; 1980) |&gt; autoplot(Electricity) + autolayer(fc1) + autolayer(fc2) + labs(title = &#39;ETS(MNM): electricity production in Australia&#39;) ## Scale for fill_ramp is already present. ## Adding another scale for fill_ramp, which will replace the existing scale. 3.3 ETS(MAdM): combinations MAdM: Multiplicative error, Additive dumped trend, Multiplicative seasonality \\[ \\begin{cases} y_t = (l_{t-1} + \\phi b_{t-1}) \\times s_{t-12} \\times (1 + u_t) \\\\ l_t = (l_{t-1} + \\phi b_{t-1}) \\times (1 + \\alpha u_t), l_0 - \\text {start value} \\\\ b_t = \\phi b_{t-1} + \\beta(l_{t-1} + \\phi b_{t-1})u_t, b_0 - \\text {start value}\\\\ s_t = s_{t-12} \\times (1 + \\gamma u_t), s_0, ..., s_{-11} - \\text {start values} \\\\ u_t \\sim \\mathcal{N}(0,\\,\\sigma^{2}) \\text { and independent} \\end{cases} \\] Parameters Non-seasonal parameters: \\(\\alpha, \\beta, \\sigma, \\phi, l_0, b_0\\) Seasonal parameters: \\(\\gamma, s_0, s_{-1}, ... , s_{-11}\\) Forecast One-step forecast \\[ y_{T+1} = (l_T + \\phi b_T) \\times s_{T-11} \\times (1 + u_{T+1}) \\] \\[ (y_{T+1}|\\mathcal{F_T}) \\sim \\mathcal{N}((\\ell_T + \\phi b_T) \\times s_{T-11}, (\\ell_T + \\phi b_T)^2 \\times s_{T-11}^2 \\times \\sigma^2) \\] Example rf_m |&gt; filter(year(date) &gt; 2012, year(date) &lt; 2022) |&gt; model(ETS(total ~ error(&#39;M&#39;) + trend(&#39;Ad&#39;) + season(&#39;M&#39;))) |&gt; forecast(h = 48) |&gt; autoplot(rf_m) + labs(title = &#39;EST(MAdM): forecast&#39;) Combinations: Errors: A, M Trend: N, A, Ad, M, Md Seasonality: N, A, M Historic naming: ETS(ANN) - Simple Exponential Smoothing ETS(AAA) - Additive Holt-Winters Method ETS(AAM) - Multiplicative Holt-Winters Method ETS(AAdM) - Damped Additive Trend with Multiplicative Seasonality (Damped Holt-Winters) 3.4 Examples rf_m |&gt; gg_tsdisplay(total) Split into training and test set. rf_train &lt;- rf_m |&gt; filter(year(date) &lt; 2020) rf_test &lt;- rf_m |&gt; anti_join(rf_train, by = &#39;date&#39;) models &lt;- rf_train |&gt; model( snaive = SNAIVE(total), ANA = ETS(total ~ error(&#39;A&#39;) + trend(&#39;N&#39;) + season(&#39;A&#39;)), AAA = ETS(total ~ error(&#39;A&#39;) + trend(&#39;A&#39;) + season(&#39;A&#39;)), AAdA = ETS(total ~ error(&#39;A&#39;) + trend(&#39;Ad&#39;) + season(&#39;A&#39;)), zzz = ETS(total), # select the best model by AIC azz = ETS(total ~ error(&#39;A&#39;)), theta = THETA(total) # theta method ) models$zzz[[1]] |&gt; report() ## Series: total ## Model: ETS(M,N,M) ## Smoothing parameters: ## alpha = 0.09614705 ## gamma = 0.0001025139 ## ## Initial states: ## l[0] s[0] s[-1] s[-2] s[-3] s[-4] s[-5] s[-6] s[-7] s[-8] s[-9] s[-10] s[-11] ## 98845.29 0.8608546 0.876489 1.033511 1.431267 1.673549 1.454279 1.274721 0.4759065 0.9107223 0.736584 0.6824381 0.5896779 ## ## sigma^2: 0.017 ## ## AIC AICc BIC ## 4023.088 4026.246 4069.947 models$theta[[1]] |&gt; report() ## Series: total ## Model: THETA ## ## Alpha: 0.1385 ## Drift: -71.6835 ## sigma^2: 141532473.0062 fc &lt;- models |&gt; forecast(h = 72) fc |&gt; accuracy(rf_m) ## Warning: The future dataset is incomplete, incomplete out-of-sample data will be treated as missing. ## 19 observations are missing between 2024 Jun and 2025 Dec ## # A tibble: 7 × 12 ## .model code name .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;int64&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AAA 643 Российская Федерация Test 9524. 20089. 16578. 14.3 26.1 1.37 1.25 0.534 ## 2 AAdA 643 Российская Федерация Test 2156. 16373. 12366. 3.07 19.2 1.02 1.02 0.458 ## 3 ANA 643 Российская Федерация Test -57.3 16139. 11922. -0.401 18.4 0.987 1.01 0.452 ## 4 azz 643 Российская Федерация Test -57.3 16139. 11922. -0.401 18.4 0.987 1.01 0.452 ## 5 snaive 643 Российская Федерация Test -1987. 14026. 10311. -7.60 17.0 0.853 0.874 0.470 ## 6 theta 643 Российская Федерация Test 115. 14283. 10025. -4.25 16.5 0.830 0.890 0.545 ## 7 zzz 643 Российская Федерация Test -1830. 14036. 10206. -6.92 16.9 0.845 0.874 0.500 rf_m |&gt; autoplot(total) + autolayer(fc) + facet_grid(.model ~ .) Composite model. models &lt;- rf_train |&gt; model( snaive = SNAIVE(total), theta = THETA(total), composit = decomposition_model( STL(total ~ season(window = Inf)), ETS(season_adjust ~ error(&#39;A&#39;) + trend(&#39;Ad&#39;) + season(&#39;N&#39;)), SNAIVE(season_year) )) models |&gt; forecast(h = 48) |&gt; accuracy(rf_m) ## # A tibble: 3 × 12 ## .model code name .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;int64&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 composit 643 Российская Федерация Test 3863. 17186. 13390. 4.97 20.4 1.11 1.07 0.490 ## 2 snaive 643 Российская Федерация Test -2213. 14571. 10717. -8.33 17.6 0.887 0.908 0.479 ## 3 theta 643 Российская Федерация Test -42.7 14814. 10474. -4.98 17.0 0.867 0.923 0.567 Model evaluation for multiple time series. train &lt;- ts_marriages |&gt; filter(year(date) &lt; 2020) models &lt;- train |&gt; model( snaive = SNAIVE(total), zzz = ETS(log(total)), # select the best model by AIC theta = THETA(total) ) ## Warning: 22 errors (2 unique) encountered for zzz ## [21] ETS does not support missing values. ## [1] NA/NaN/Inf in &#39;y&#39; ## Warning: 21 errors (1 unique) encountered for theta ## [21] missing values in object acc &lt;- models |&gt; forecast(h = 48) |&gt; accuracy(rf_m) ## Warning: The future dataset is incomplete, incomplete out-of-sample data will be treated as missing. ## 48 observations are missing between 2020 Jan and 2023 Dec acc |&gt; group_by(.model) |&gt; summarise(avg_MAE = mean(MAE, na.rm = TRUE)) ## # A tibble: 3 × 2 ## .model avg_MAE ## &lt;chr&gt; &lt;dbl&gt; ## 1 snaive 74637. ## 2 theta 74759. ## 3 zzz 74672. "],["stationary-process.html", "Chapter 4 Stationary Process 4.1 MA processes 4.2 Examples", " Chapter 4 Stationary Process library(tidyverse) library(fpp3) library(ggplot2) library(rio) Stationary process is a random process with constant characteristics. \\[ \\begin{cases} \\mathbb E(y_t) = \\mu \\\\ Cov(y_t, y_{t+k}) = \\gamma_k \\end{cases} \\] + Random walk is an example of non-stationary process + Random sample is an example of stationary process 4.1 MA processes For a process \\(y_t\\) where \\(t \\in \\mathbb Z\\), lagged process \\(Ly_t\\) is the same sequence of values with shifted index: \\[ Ly_t = y_{t-1} \\] \\[ L^2y_t = L \\cdot L \\cdot y_t = L \\cdot y_{t-1} = y_{t-2} \\] \\[ \\bigtriangleup y_t = y_t - y_{t-1} = (1-L)y_t \\] Seasonal difference: \\[ \\bigtriangleup_{12} y_t = y_{t} - y_{t-12} = (1-L^{12})y_t \\] A process \\(y_t\\) that can be written as \\[ y_t = \\mu + u_t +\\alpha_1u_{t-1} +...+\\alpha_qu_{t-q}, \\] where \\(\\alpha_q \\ne 0\\) and \\(u_t\\) is a white noise, we can name \\(MA(q)\\) process. ACF of MA(q) process suddenly becomes zero for all lags \\(k &gt; q\\). PACF of MA(q) process convergates to zero exponentially fast. MA(q) process is stationary. 4.2 Examples set.seed(777) data &lt;- tibble(y = arima.sim(n = 120, model = list(ma = 0.9))) data$date &lt;- yearmonth(ymd(&#39;2000-12-01&#39;) + months(1:120)) data ## # A tibble: 120 × 2 ## y date ## &lt;dbl&gt; &lt;mth&gt; ## 1 0.0423 2001 Jan ## 2 0.152 2001 Feb ## 3 0.0609 2001 Mar ## 4 1.28 2001 Apr ## 5 2.10 2001 May ## 6 0.762 2001 Jun ## 7 1.29 2001 Jul ## 8 0.792 2001 Aug ## 9 -0.565 2001 Sep ## 10 -0.645 2001 Oct ## # ℹ 110 more rows data &lt;- as_tsibble(data, index = date) data ## # A tsibble: 120 x 2 [1M] ## y date ## &lt;dbl&gt; &lt;mth&gt; ## 1 0.0423 2001 Jan ## 2 0.152 2001 Feb ## 3 0.0609 2001 Mar ## 4 1.28 2001 Apr ## 5 2.10 2001 May ## 6 0.762 2001 Jun ## 7 1.29 2001 Jul ## 8 0.792 2001 Aug ## 9 -0.565 2001 Sep ## 10 -0.645 2001 Oct ## # ℹ 110 more rows data |&gt; gg_tsdisplay() ## Plot variable not specified, automatically selected `y = y` data |&gt; ACF() |&gt; autoplot() ## Response variable not specified, automatically selected `var = y` data |&gt; PACF() |&gt; autoplot() ## Response variable not specified, automatically selected `var = y` m &lt;- import(paste0(getwd(), &#39;/00_data/marriages.csv&#39;)) glimpse(m) ## Rows: 24,852 ## Columns: 4 ## $ code &lt;int64&gt; 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1… ## $ name &lt;chr&gt; &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Ал… ## $ total &lt;int&gt; 953, 1007, 1311, 1554, 562, 1900, 2338, 3034, 2460, 1762, 1411, 1554, 1069, 1221, 1330, 1774, 609, 2107, 2708, 3272, 2483, 1825, 1721, 1940, 1006, … ## $ date &lt;IDate&gt; 2006-01-01, 2006-02-01, 2006-03-01, 2006-04-01, 2006-05-01, 2006-06-01, 2006-07-01, 2006-08-01, 2006-09-01, 2006-10-01, 2006-11-01, 2006-12-01, 2… ts_marriages &lt;- m |&gt; mutate(date = yearmonth(date)) |&gt; as_tsibble(index = date, key = c(&#39;code&#39;, &#39;name&#39;)) glimpse(ts_marriages) ## Rows: 24,852 ## Columns: 4 ## Key: code, name [109] ## $ code &lt;int64&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 3… ## $ name &lt;chr&gt; &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный фе… ## $ total &lt;int&gt; 14845, 16414, 15753, 21803, 9384, 29571, 35691, 39263, 40480, 24137, 21207, 19009, 15433, 17430, 13878, 29703, 10529, 31572, 41328, 42609, 41779, 2… ## $ date &lt;mth&gt; 2006 Jan, 2006 Feb, 2006 Mar, 2006 Apr, 2006 May, 2006 Jun, 2006 Jul, 2006 Aug, 2006 Sep, 2006 Oct, 2006 Nov, 2006 Dec, 2007 Jan, 2007 Feb, 2007 Ma… rf_m &lt;- ts_marriages |&gt; filter(code == 643, !is.na(total)) rf_m |&gt; gg_tsdisplay(total) rf_train &lt;- rf_m |&gt; filter(date &lt; yearmonth(&#39;2022 May&#39;)) mods &lt;- rf_train |&gt; model(snaive = SNAIVE(total), theta = THETA(total), ma12 = ARIMA(total ~ 1 + pdq(0, 0, 12) + PDQ(0, 0, 0)), stl_ma = decomposition_model(STL(total ~ season(window = Inf)), ARIMA(season_adjust ~ 1 + pdq(0, 0, 1:5) + PDQ(0, 0, 0)), SNAIVE(season_year))) mods ## # A mable: 1 x 6 ## # Key: code, name [1] ## code name snaive theta ma12 stl_ma ## &lt;int64&gt; &lt;chr&gt; &lt;model&gt; &lt;model&gt; &lt;model&gt; &lt;model&gt; ## 1 643 Российская Федерация &lt;SNAIVE&gt; &lt;THETA&gt; &lt;ARIMA(0,0,12) w/ mean&gt; &lt;STL decomposition model&gt; report(mods$ma12[[1]]) ## Series: total ## Model: ARIMA(0,0,12) w/ mean ## ## Coefficients: ## ma1 ma2 ma3 ma4 ma5 ma6 ma7 ma8 ma9 ma10 ma11 ma12 constant ## 0.3215 0.1800 0.1616 -0.0455 -0.0636 -0.2656 -0.1575 -0.0969 -0.1656 0.0666 0.2375 0.7986 91320.143 ## s.e. 0.0760 0.0763 0.0892 0.0771 0.0765 0.0744 0.0660 0.0680 0.0655 0.0678 0.0827 0.0676 2837.164 ## ## sigma^2 estimated as 453863707: log likelihood=-2235.24 ## AIC=4498.48 AICc=4500.8 BIC=4544.37 report(mods$stl_ma[[1]]) ## Series: total ## Model: STL decomposition model ## Combination: season_adjust + season_year ## ## ======================================== ## ## Series: season_adjust ## Model: ARIMA(0,0,5) w/ mean ## ## Coefficients: ## ma1 ma2 ma3 ma4 ma5 constant ## 0.2911 0.4656 0.4871 0.1537 0.2149 91664.818 ## s.e. 0.0700 0.0754 0.0753 0.0644 0.0686 2234.992 ## ## sigma^2 estimated as 150483677: log likelihood=-2120.82 ## AIC=4255.63 AICc=4256.23 BIC=4278.58 ## ## Series: season_year ## Model: SNAIVE ## ## sigma^2: 0 fc &lt;- mods |&gt; forecast(h = &#39;2 years&#39;) fc |&gt; accuracy(rf_m) ## # A tibble: 4 × 12 ## .model code name .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;int64&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ma12 643 Российская Федерация Test -9318. 29162. 26169. -27.7 41.9 2.09 1.78 0.620 ## 2 snaive 643 Российская Федерация Test 4994. 16002. 10150. 3.22 11.8 0.810 0.977 0.580 ## 3 stl_ma 643 Российская Федерация Test -8158. 16777. 13970. -11.8 17.9 1.11 1.02 0.420 ## 4 theta 643 Российская Федерация Test 7290. 15255. 9828. 7.29 11.2 0.784 0.931 0.482 "],["arma-processes.html", "Chapter 5 ARMA processes 5.1 AR process 5.2 ARMA process 5.3 Examples 5.4 Comparing AR, MA and ARMA", " Chapter 5 ARMA processes library(tidyverse) library(fpp3) library(ggplot2) library(rio) 5.1 AR process An \\(\\textbf{AR(p)}\\) process is described by the following equation: \\[ y_t = c + \\beta_1 y_{t-1} + \\ldots + \\beta_p y_{t-p} + u_t, \\] where \\(u_t\\) represents white noise, and \\(\\beta_p \\neq 0\\). This process is called a solution of the \\(MA(\\infty)\\) relative to \\(u_t\\). \\(AR(p)\\) process is stationary. 5.2 ARMA process An \\(\\textbf{ARMA(p, q)}\\) process is described by the following equation: \\[ y_t = c + \\beta_1 y_{t-1} + \\ldots + \\beta_p y_{t-p} + u_t + \\alpha_1 u_{t-1} + \\ldots + \\alpha_q u_{t-q}, \\] where \\(u_t\\) represents white noise, \\(\\beta_p \\neq 0\\), and \\(\\alpha_q \\neq 0\\). This process is called a solution of the \\(MA(\\infty)\\) relative to \\(u_t\\). 5.3 Examples set.seed(777) # generate data data &lt;- tibble(a = arima.sim(n = 100, model = list(ar = 0.5)), b = arima.sim(n = 100, model = list(ar = 0.9)), c = cumsum(rnorm(n = 100, mean = 0, sd = 1))) data$year = 2001:2100 data &lt;- data |&gt; as_tsibble(index = year) data |&gt; gg_tsdisplay(a, plot_type = &#39;partial&#39;) data |&gt; gg_tsdisplay(b, plot_type = &#39;partial&#39;) data |&gt; gg_tsdisplay(c, plot_type = &#39;partial&#39;) train &lt;- data |&gt; filter(year &lt; 2081) mod_b &lt;- train |&gt; model(ar1 = ARIMA(b ~ pdq(1, 0, 0)), # is correct ma1 = ARIMA(b ~ pdq(0, 0, 1)), naive = NAIVE(b)) mod_c &lt;- train |&gt; model(ar1 = ARIMA(c ~ pdq(1, 0, 0)), ma1 = ARIMA(c ~ pdq(0, 0, 1)), naive = NAIVE(c)) # is correct fc_b &lt;- mod_b |&gt; forecast(h = 20) fc_c &lt;- mod_c |&gt; forecast(h = 20) fc_b |&gt; autoplot(data |&gt; filter(year &gt; 2050)) fc_c |&gt; autoplot(data |&gt; filter(year &gt; 2050)) 5.4 Comparing AR, MA and ARMA m &lt;- import(paste0(getwd(), &#39;/00_data/marriages.csv&#39;)) glimpse(m) ## Rows: 24,852 ## Columns: 4 ## $ code &lt;int64&gt; 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1… ## $ name &lt;chr&gt; &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Ал… ## $ total &lt;int&gt; 953, 1007, 1311, 1554, 562, 1900, 2338, 3034, 2460, 1762, 1411, 1554, 1069, 1221, 1330, 1774, 609, 2107, 2708, 3272, 2483, 1825, 1721, 1940, 1006, … ## $ date &lt;IDate&gt; 2006-01-01, 2006-02-01, 2006-03-01, 2006-04-01, 2006-05-01, 2006-06-01, 2006-07-01, 2006-08-01, 2006-09-01, 2006-10-01, 2006-11-01, 2006-12-01, 2… m_agg &lt;- m |&gt; mutate(year = year(date)) |&gt; select(-date) |&gt; group_by(code, name, year) |&gt; summarise(sum = sum(total), max = max(total), .groups = &#39;keep&#39;) glimpse(m_agg) ## Rows: 2,071 ## Columns: 5 ## Groups: code, name, year [2,071] ## $ code &lt;int64&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31… ## $ name &lt;chr&gt; &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный фед… ## $ year &lt;dbl&gt; 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2006, 2007, 2008, 2009, 2010, 2011… ## $ sum &lt;int&gt; 287557, 328158, 300883, 314089, 311007, 338464, 308879, 317995, 322822, 313157, 263540, 284184, 239977, 259596, 205874, 260025, 295471, 262274, NA, … ## $ max &lt;int&gt; 40480, 42609, 50269, 45051, 45494, 44597, 44401, 49167, 48272, 44041, 39471, 42925, 41523, 38129, 33330, 37089, 36444, 35476, NA, 14000, 15693, 1800… rfy &lt;- m_agg |&gt; filter(code == 643) |&gt; as_tsibble(index = year) rfy |&gt; gg_tsdisplay(sum, plot_type = &#39;partial&#39;) ## Warning: Removed 1 row containing missing values or values outside the scale range (`geom_line()`). ## Warning: Removed 1 row containing missing values or values outside the scale range (`geom_point()`). train &lt;- rfy |&gt; filter(year &lt; 2020) models &lt;- train |&gt; model(ar1 = ARIMA(sum ~ pdq(1, 0, 0)), ma1 = ARIMA(sum ~ pdq(0, 0, 1)), naive = NAIVE(sum), arma11 = ARIMA(sum ~ pdq(1, 0, 1))) report(models$ar1[[1]]) ## Series: sum ## Model: ARIMA(1,0,0) w/ mean ## ## Coefficients: ## ar1 constant ## 0.7069 326218.57 ## s.e. 0.1872 20727.82 ## ## sigma^2 estimated as 8.776e+09: log likelihood=-179.4 ## AIC=364.8 AICc=367.2 BIC=366.72 nrow(train) ## [1] 14 nrow(rfy) ## [1] 19 fc &lt;- models |&gt; forecast(h = 5) fc |&gt; accuracy(rfy) ## # A tibble: 4 × 10 ## .model .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ar1 Test -115730. 140696. 115730. -13.7 13.7 1.51 1.49 -0.0462 ## 2 arma11 Test -85991. 121657. 102760. -10.5 12.1 1.34 1.29 -0.0138 ## 3 ma1 Test -203169. 221282. 203169. -23.4 23.4 2.64 2.35 0.0541 ## 4 naive Test -26557. 104471. 78447. -4.18 9.11 1.02 1.11 0.0716 "],["arima-and-seasonal-arima-sarima.html", "Chapter 6 ARIMA and seasonal ARIMA (sARIMA) 6.1 Unit root test 6.2 Seasonal ARIMA 6.3 Automatic ARIMA 6.4 Output2Equations", " Chapter 6 ARIMA and seasonal ARIMA (sARIMA) library(tidyverse) library(fpp3) library(ggplot2) library(rio) library(urca) How to choose \\(ARIMA(p,0,q), ARIMA(p,1,q)\\) or \\(ARIMA(p,2,q)\\)? Looking at the plot. The variance of a stationary process is constant (approximately). Cross-validation Unit root test ARMA: only for stationary process ARIMA: for non-stationary process 6.1 Unit root test m &lt;- import(paste0(getwd(), &#39;/00_data/marriages.csv&#39;)) glimpse(m) ## Rows: 24,852 ## Columns: 4 ## $ code &lt;int64&gt; 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1… ## $ name &lt;chr&gt; &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Алтайский край&quot;, &quot;Ал… ## $ total &lt;int&gt; 953, 1007, 1311, 1554, 562, 1900, 2338, 3034, 2460, 1762, 1411, 1554, 1069, 1221, 1330, 1774, 609, 2107, 2708, 3272, 2483, 1825, 1721, 1940, 1006, … ## $ date &lt;IDate&gt; 2006-01-01, 2006-02-01, 2006-03-01, 2006-04-01, 2006-05-01, 2006-06-01, 2006-07-01, 2006-08-01, 2006-09-01, 2006-10-01, 2006-11-01, 2006-12-01, 2… ts_marriages &lt;- m |&gt; mutate(date = yearmonth(date)) |&gt; as_tsibble(index = date, key = c(&#39;code&#39;, &#39;name&#39;)) glimpse(ts_marriages) ## Rows: 24,852 ## Columns: 4 ## Key: code, name [109] ## $ code &lt;int64&gt; 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 3… ## $ name &lt;chr&gt; &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный федеральный округ&quot;, &quot;Центральный фе… ## $ total &lt;int&gt; 14845, 16414, 15753, 21803, 9384, 29571, 35691, 39263, 40480, 24137, 21207, 19009, 15433, 17430, 13878, 29703, 10529, 31572, 41328, 42609, 41779, 2… ## $ date &lt;mth&gt; 2006 Jan, 2006 Feb, 2006 Mar, 2006 Apr, 2006 May, 2006 Jun, 2006 Jul, 2006 Aug, 2006 Sep, 2006 Oct, 2006 Nov, 2006 Dec, 2007 Jan, 2007 Feb, 2007 Ma… rf_m &lt;- ts_marriages |&gt; filter(code == 643, !is.na(total)) rf_m |&gt; gg_tsdisplay(total) 6.1.1 KPSS test kpss_res &lt;- ur.kpss(rf_m$total, type = &#39;mu&#39;) # H0: ts = mu + stat (stationary) # Ha: ts = mu + stat + rw summary(kpss_res) ## ## ####################### ## # KPSS Unit Root Test # ## ####################### ## ## Test is of type: mu with 4 lags. ## ## Value of test-statistic is: 0.7738 ## ## Critical value for a significance level of: ## 10pct 5pct 2.5pct 1pct ## critical values 0.347 0.463 0.574 0.739 # =&gt; H0 is rejected =&gt; difference is needed 6.1.2 ADF test adf_res &lt;- ur.df(rf_m$total, type = &#39;drift&#39;, selectlags = &#39;AIC&#39;) # H0: non-stationary process ts = ARIMA(p,1,q) + trend # Ha: stationary process ts = ARIMA(p,0,q) + const summary(adf_res) ## ## ############################################### ## # Augmented Dickey-Fuller Test Unit Root Test # ## ############################################### ## ## Test regression drift ## ## ## Call: ## lm(formula = z.diff ~ z.lag.1 + 1 + z.diff.lag) ## ## Residuals: ## Min 1Q Median 3Q Max ## -70353 -18928 -5031 15668 81259 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.599e+04 5.751e+03 6.257 2.08e-09 *** ## z.lag.1 -3.982e-01 5.971e-02 -6.669 2.12e-10 *** ## z.diff.lag 3.629e-02 6.802e-02 0.533 0.594 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 29190 on 216 degrees of freedom ## Multiple R-squared: 0.1926, Adjusted R-squared: 0.1851 ## F-statistic: 25.76 on 2 and 216 DF, p-value: 9.271e-11 ## ## ## Value of test-statistic is: -6.6689 22.2376 ## ## Critical values for test statistics: ## 1pct 5pct 10pct ## tau2 -3.46 -2.88 -2.57 ## phi1 6.52 4.63 3.81 # =&gt; H0 is rejected =&gt; difference is not needed 6.2 Seasonal ARIMA How to choose: \\(SARIMA(p, 0, q)(P, 0 , Q)\\) or \\(SARIMA(p, 0, q)(P, 1 , Q)[12]\\)? Step 1: How many times should I apply a seasonal differencing? Step 1: Apply STL decomposition \\(y_t = trend_t + season_t + remainder_t\\) Step 2: Calculate \\(F_{season}\\): \\(F_{season} = max\\{1 - \\frac {sVar(remainder)}{sVar(season + remainder)}, 0\\}\\) Step 3: If \\(F_{season}\\) is below the threshold, then work with source series, otherwise, apply seasonal differencing. Repeat steps 1-3 for seasonally differenced series and apply a second difference if it’s needed. Step 2: How many times should I apply a first differencing? Apply the KPSS test with constant to the origin series: If \\(H_0\\) is not rejected, then work with the origin series, otherwise, apply the test to the first differenced series. Repeat the step, if \\(H_0\\) is rejected, then work with the second differenced test, otherwise, work with the first differenced series. Step 3: Apply SARMA models to stationary series. Choose the best model by AIC (min.). 6.3 Automatic ARIMA # 1. Look at the plot, ACF, PACF rf_m |&gt; gg_tsdisplay(total, plot_type = &#39;partial&#39;) Observations: ACF is sinusoidal - it is typical for seasonal series PACF: non-seasonal is exponentially decaying, but there is one significant seasonal lag. AR(1) p=1 for no-seasonal part, and AR(1) P=1 for seasonal part. train &lt;- rf_m |&gt; filter(date &lt;= yearmonth(&#39;2022 May&#39;)) models &lt;- train |&gt; model(snaive = SNAIVE(total), theta = THETA(total), auto = ARIMA(total), # Khandakar-Hyndman Method sarima111_x11 = ARIMA(total ~ 0 + pdq(1,1,1) + PDQ(0:1,1,1)) ) models$auto[[1]] |&gt; report() ## Series: total ## Model: ARIMA(0,0,3)(0,1,1)[12] w/ drift ## ## Coefficients: ## ma1 ma2 ma3 sma1 constant ## 0.1508 0.2176 0.3891 -0.7403 -1879.372 ## s.e. 0.0727 0.0646 0.0753 0.0671 518.162 ## ## sigma^2 estimated as 155918872: log likelihood=-2010 ## AIC=4032 AICc=4032.47 BIC=4051.32 models$sarima111_x11[[1]] |&gt; report() ## Series: total ## Model: ARIMA(1,1,1)(0,1,1)[12] ## ## Coefficients: ## ar1 ma1 sma1 ## -0.0025 -0.8337 -0.7910 ## s.e. 0.1164 0.0933 0.0588 ## ## sigma^2 estimated as 168236130: log likelihood=-2008.72 ## AIC=4025.43 AICc=4025.66 BIC=4038.29 fc &lt;- models |&gt; forecast(h = 2) fc |&gt; accuracy(rf_m) |&gt; select(-code, -name) ## # A tibble: 4 × 10 ## .model .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 auto Test -393. 1624. 1575. -0.535 1.50 0.126 0.0993 -0.5 ## 2 sarima111_x11 Test -1092. 2870. 2654. -1.30 2.57 0.213 0.176 -0.5 ## 3 snaive Test -3297 3415. 3297 -3.15 3.15 0.264 0.209 -0.5 ## 4 theta Test 1738. 4602. 4261. 1.14 3.75 0.341 0.282 -0.5 Using cross validation. m_slide = rf_m |&gt; slide_tsibble(.size = 60, .step = 1) m_slide ## # A tsibble: 9,720 x 5 [1M] ## # Key: .id, code, name [162] ## code name total date .id ## &lt;int64&gt; &lt;chr&gt; &lt;int&gt; &lt;mth&gt; &lt;int&gt; ## 1 643 Российская Федерация 55509 2006 Jan 1 ## 2 643 Российская Федерация 62449 2006 Feb 1 ## 3 643 Российская Федерация 70798 2006 Mar 1 ## 4 643 Российская Федерация 86055 2006 Apr 1 ## 5 643 Российская Федерация 35960 2006 May 1 ## 6 643 Российская Федерация 111409 2006 Jun 1 ## 7 643 Российская Федерация 127475 2006 Jul 1 ## 8 643 Российская Федерация 149120 2006 Aug 1 ## 9 643 Российская Федерация 151116 2006 Sep 1 ## 10 643 Российская Федерация 95192 2006 Oct 1 ## # ℹ 9,710 more rows models_slide &lt;- m_slide |&gt; model(snaive = SNAIVE(total), theta = THETA(total), auto = ARIMA(total), # Khandakar-Hyndman Method ) fc_slide &lt;- models_slide |&gt; forecast(h = 1) fc_slide |&gt; accuracy(rf_m) |&gt; select(-code, -name, -.type) ## Warning: The future dataset is incomplete, incomplete out-of-sample data will be treated as missing. ## 1 observation is missing at 2024 Jun ## # A tibble: 3 × 9 ## .model ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 auto -282. 14050. 11171. -2.00 15.1 0.886 0.831 0.171 ## 2 snaive -1695. 16983. 12552. -4.82 17.2 0.996 1.00 0.368 ## 3 theta -679. 13538. 10579. -2.98 14.2 0.839 0.801 0.0545 model_agg &lt;- models_slide |&gt; mutate(av3 = (auto + snaive + theta)/3, auto_theta = (auto + theta)/2, snaive_theta = (snaive + theta)/2) fc_slide_agg &lt;- model_agg |&gt; forecast(h = 1) fc_slide_agg |&gt; accuracy(rf_m) |&gt; select(-code, -name, -.type) ## Warning: The future dataset is incomplete, incomplete out-of-sample data will be treated as missing. ## 1 observation is missing at 2024 Jun ## # A tibble: 6 × 9 ## .model ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 auto -282. 14050. 11171. -2.00 15.1 0.886 0.831 0.171 ## 2 auto_theta -481. 13008. 10135. -2.49 13.8 0.804 0.769 0.0833 ## 3 av3 -885. 13233. 10178. -3.27 14.0 0.807 0.783 0.166 ## 4 snaive -1695. 16983. 12552. -4.82 17.2 0.996 1.00 0.368 ## 5 snaive_theta -1187. 13438. 10183. -3.90 14.1 0.808 0.795 0.182 ## 6 theta -679. 13538. 10579. -2.98 14.2 0.839 0.801 0.0545 6.4 Output2Equations train |&gt; model(ARIMA(total ~ pdq(2,1,1) + PDQ(1,1,1))) |&gt; report() ## Series: total ## Model: ARIMA(2,1,1)(1,1,1)[12] ## ## Coefficients: ## ar1 ar2 ma1 sar1 sma1 ## -0.9743 -0.5254 0.2502 0.0343 -0.7840 ## s.e. 0.1423 0.0855 0.1680 0.0969 0.0723 ## ## sigma^2 estimated as 166440821: log likelihood=-2005.93 ## AIC=4023.86 AICc=4024.33 BIC=4043.15 Interpretation: ARIMA(2,1,1)(1,1,1)[12]: (2,1,1) - non-seasonal part, (1,1,1) - seasonal part: AR part: ARIMA(2,1,1)(1,1,1) - one non-seasonal lag, \\(d=1\\): \\((1 - L)\\) ARIMA(2,1,1)(1,1,1) - on seasonal lag, \\(D=1\\): \\((1 - L^{12})\\) ARIMA(2,1,1)(1,1,1) - AR non-seasonal part, \\(p=2\\), two non-seasonal AR params: \\(ar1 = -0.9743\\), \\(ar2 = -0.5254\\): \\((1 - (-0.9743) \\cdot L - (-0.5254)\\cdot L^2)\\) ARIMA(2,1,1)(1,1,1) - AR seasonal part, \\(p=1\\), one seasonal AR param: \\(sar1 = 0.0343\\): \\((1 - (0.0343) \\cdot L^{12})\\) AR summary: \\((1 - L) \\cdot (1 - L^{12}) \\cdot (1 - (-0.9743) \\cdot L - (-0.5254)\\cdot L^2) \\cdot (1 - (0.0343) \\cdot L^{12}) \\cdot y_t\\) MA part: ARIMA(2,1,1)(1,1,1) - one non-seasonal lag, \\(q=1\\), \\(ma1 = 0.2502\\): \\((1 + 0.2502 \\cdot L)\\) ARIMA(2,1,1)(1,1,1) - one seasonal lag, \\(Q=1\\), \\(sma1 = -0.7840\\): \\((1 - 0.7840 \\cdot L^{12})\\) MA summary: \\((1 + 0.2502 \\cdot L) \\cdot (1 - 0.7840 \\cdot L^{12}) \\cdot u_t\\), where \\(u_t\\) is white noise. The equation: \\[ (1 - L) \\cdot (1 - L^{12}) \\cdot (1 - (-0.9743) \\cdot L - (-0.5254)\\cdot L^2) \\cdot (1 - (0.0343) \\cdot L^{12}) \\cdot y_t = \\\\(1 + 0.2502 \\cdot L) \\cdot (1 - 0.7840 \\cdot L^{12}) \\cdot u_t \\] "],["arima-with-predictors.html", "Chapter 7 ARIMA with predictors 7.1 How to make predictors? 7.2 Using lags 7.3 Using function of lags 7.4 Time predictors 7.5 Trend predictors 7.6 Seasonal and holidays dummies 7.7 Sin and Cos over time 7.8 ARIMA and predictors", " Chapter 7 ARIMA with predictors library(tidyverse) library(fpp3) library(ggplot2) library(rio) library(urca) 7.1 How to make predictors? Using lags \\(y_{t-k}\\) Using functions over lags 7.2 Using lags Training set: \\[ \\begin{pmatrix} y_3 \\\\ y_4 \\\\ y_5 \\\\ \\vdots \\\\ y_T \\end{pmatrix} \\begin{pmatrix} y_1 &amp; y_2 \\\\ y_2 &amp; y_3 \\\\ y_3 &amp; y_4 \\\\ \\vdots &amp; \\vdots \\\\ y_{T-2} &amp; y_{T-1} \\end{pmatrix} \\] Note! Each added lag reduces the thaining set. 7.3 Using function of lags Aggregating functions: minimum, maximum, mean, median, range, variance, standard deviation,… An argument of aggregating function: Moving window Growing window Example of maximum over a moving window and minimum over a growing window: \\[ \\begin{pmatrix} y_3 \\\\ y_4 \\\\ y_5 \\\\ \\vdots \\\\ y_T \\end{pmatrix} \\begin{pmatrix} max(y_1, y_2) &amp; min(y_1, y_2) \\\\ max(y_2, y_3) &amp; min(y_1, y_2, y_3) \\\\ max(y_3, y_4) &amp; min(y_1, \\dots , y_4) \\\\ \\vdots &amp; \\vdots \\\\ max(y_{T-2}, y_{T-1}) &amp; min(y_1,\\dots, y_{T-1}) \\end{pmatrix} \\] 7.4 Time predictors Trend predictors Seasonal and holidays dummies Sin and Cos over time 7.5 Trend predictors \\[ \\begin{pmatrix} y_3 \\\\ y_4 \\\\ y_5 \\\\ \\vdots \\\\ y_T \\end{pmatrix} \\begin{pmatrix} 1 &amp; \\sqrt 1 \\\\ 2 &amp; \\sqrt 2 \\\\ 3 &amp; \\sqrt 3 \\\\ \\vdots &amp; \\vdots \\\\ T &amp; \\sqrt T \\end{pmatrix} \\] Forecast: \\[ \\begin{pmatrix} ? \\end{pmatrix} \\begin{pmatrix} T+1 &amp; \\sqrt {T+1} \\end{pmatrix} \\] A monotone transformation: It is useless for tree-based algorithms The origin variable could be transformed: log, Box-Cox,… 7.6 Seasonal and holidays dummies Seasonal dummies (for quarterly seasonality): \\[ \\begin{pmatrix} y_1 \\\\ y_2 \\\\ y_3 \\\\ y_4 \\\\ y_5 \\\\ y_6 \\\\ \\vdots \\\\ y_T \\end{pmatrix} \\begin{pmatrix} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 1 \\\\ 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 \\\\ \\vdots &amp; \\vdots &amp; \\vdots &amp; \\vdots \\\\ 0 &amp; 0 &amp; 1 &amp; 0 \\\\ \\end{pmatrix} \\] &gt; Important! For multiple regression with seasonal dummy variables, you have two options: either include a dummy variable for each season and omit the constant (intercept), or include the intercept and use dummy variables for all but one season. 7.7 Sin and Cos over time For daily data: Add predictor \\(cos(\\frac {2\\pi} {365} \\cdot t)\\) and \\(sin(\\frac {2\\pi} {365} \\cdot t)\\) Add predictor \\(cos(\\frac {2\\pi} {365} \\cdot 2t)\\) and \\(sin(\\frac {2\\pi} {365} \\cdot 2t)\\) Add predictor \\(cos(\\frac {2\\pi} {365} \\cdot 3t)\\) and \\(sin(\\frac {2\\pi} {365} \\cdot 3t)\\) \\(\\dots\\) 7.8 ARIMA and predictors Linear regression with ARMA errors ARMAX model ARDL model 7.8.1 Example 1 library(caret) library(ranger) library(xgboost) air &lt;- as_tsibble(AirPassengers) gg_tsdisplay(air) ## Plot variable not specified, automatically selected `y = value` Make a variance stable. air2 &lt;- air |&gt; mutate(ln_pass=log(value), t = 1:nrow(air)) glimpse(air2) ## Rows: 144 ## Columns: 4 ## $ index &lt;mth&gt; 1949 Jan, 1949 Feb, 1949 Mar, 1949 Apr, 1949 May, 1949 Jun, 1949 Jul, 1949 Aug, 1949 Sep, 1949 Oct, 1949 Nov, 1949 Dec, 1950 Jan, 1950 Feb, 1950 … ## $ value &lt;dbl&gt; 112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, … ## $ ln_pass &lt;dbl&gt; 4.718499, 4.770685, 4.882802, 4.859812, 4.795791, 4.905275, 4.997212, 4.997212, 4.912655, 4.779123, 4.644391, 4.770685, 4.744932, 4.836282, 4.948… ## $ t &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39… air2 |&gt; gg_tsdisplay(ln_pass) fourier_x &lt;- forecast::fourier(AirPassengers, K = 2) fourier_x ## S1-12 C1-12 S2-12 C2-12 ## [1,] 0.5000000 0.8660254 0.8660254 0.5 ## [2,] 0.8660254 0.5000000 0.8660254 -0.5 ## [3,] 1.0000000 0.0000000 0.0000000 -1.0 ## [4,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [5,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [6,] 0.0000000 -1.0000000 0.0000000 1.0 ## [7,] -0.5000000 -0.8660254 0.8660254 0.5 ## [8,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [9,] -1.0000000 0.0000000 0.0000000 -1.0 ## [10,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [11,] -0.5000000 0.8660254 -0.8660254 0.5 ## [12,] 0.0000000 1.0000000 0.0000000 1.0 ## [13,] 0.5000000 0.8660254 0.8660254 0.5 ## [14,] 0.8660254 0.5000000 0.8660254 -0.5 ## [15,] 1.0000000 0.0000000 0.0000000 -1.0 ## [16,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [17,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [18,] 0.0000000 -1.0000000 0.0000000 1.0 ## [19,] -0.5000000 -0.8660254 0.8660254 0.5 ## [20,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [21,] -1.0000000 0.0000000 0.0000000 -1.0 ## [22,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [23,] -0.5000000 0.8660254 -0.8660254 0.5 ## [24,] 0.0000000 1.0000000 0.0000000 1.0 ## [25,] 0.5000000 0.8660254 0.8660254 0.5 ## [26,] 0.8660254 0.5000000 0.8660254 -0.5 ## [27,] 1.0000000 0.0000000 0.0000000 -1.0 ## [28,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [29,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [30,] 0.0000000 -1.0000000 0.0000000 1.0 ## [31,] -0.5000000 -0.8660254 0.8660254 0.5 ## [32,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [33,] -1.0000000 0.0000000 0.0000000 -1.0 ## [34,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [35,] -0.5000000 0.8660254 -0.8660254 0.5 ## [36,] 0.0000000 1.0000000 0.0000000 1.0 ## [37,] 0.5000000 0.8660254 0.8660254 0.5 ## [38,] 0.8660254 0.5000000 0.8660254 -0.5 ## [39,] 1.0000000 0.0000000 0.0000000 -1.0 ## [40,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [41,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [42,] 0.0000000 -1.0000000 0.0000000 1.0 ## [43,] -0.5000000 -0.8660254 0.8660254 0.5 ## [44,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [45,] -1.0000000 0.0000000 0.0000000 -1.0 ## [46,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [47,] -0.5000000 0.8660254 -0.8660254 0.5 ## [48,] 0.0000000 1.0000000 0.0000000 1.0 ## [49,] 0.5000000 0.8660254 0.8660254 0.5 ## [50,] 0.8660254 0.5000000 0.8660254 -0.5 ## [51,] 1.0000000 0.0000000 0.0000000 -1.0 ## [52,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [53,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [54,] 0.0000000 -1.0000000 0.0000000 1.0 ## [55,] -0.5000000 -0.8660254 0.8660254 0.5 ## [56,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [57,] -1.0000000 0.0000000 0.0000000 -1.0 ## [58,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [59,] -0.5000000 0.8660254 -0.8660254 0.5 ## [60,] 0.0000000 1.0000000 0.0000000 1.0 ## [61,] 0.5000000 0.8660254 0.8660254 0.5 ## [62,] 0.8660254 0.5000000 0.8660254 -0.5 ## [63,] 1.0000000 0.0000000 0.0000000 -1.0 ## [64,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [65,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [66,] 0.0000000 -1.0000000 0.0000000 1.0 ## [67,] -0.5000000 -0.8660254 0.8660254 0.5 ## [68,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [69,] -1.0000000 0.0000000 0.0000000 -1.0 ## [70,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [71,] -0.5000000 0.8660254 -0.8660254 0.5 ## [72,] 0.0000000 1.0000000 0.0000000 1.0 ## [73,] 0.5000000 0.8660254 0.8660254 0.5 ## [74,] 0.8660254 0.5000000 0.8660254 -0.5 ## [75,] 1.0000000 0.0000000 0.0000000 -1.0 ## [76,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [77,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [78,] 0.0000000 -1.0000000 0.0000000 1.0 ## [79,] -0.5000000 -0.8660254 0.8660254 0.5 ## [80,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [81,] -1.0000000 0.0000000 0.0000000 -1.0 ## [82,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [83,] -0.5000000 0.8660254 -0.8660254 0.5 ## [84,] 0.0000000 1.0000000 0.0000000 1.0 ## [85,] 0.5000000 0.8660254 0.8660254 0.5 ## [86,] 0.8660254 0.5000000 0.8660254 -0.5 ## [87,] 1.0000000 0.0000000 0.0000000 -1.0 ## [88,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [89,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [90,] 0.0000000 -1.0000000 0.0000000 1.0 ## [91,] -0.5000000 -0.8660254 0.8660254 0.5 ## [92,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [93,] -1.0000000 0.0000000 0.0000000 -1.0 ## [94,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [95,] -0.5000000 0.8660254 -0.8660254 0.5 ## [96,] 0.0000000 1.0000000 0.0000000 1.0 ## [97,] 0.5000000 0.8660254 0.8660254 0.5 ## [98,] 0.8660254 0.5000000 0.8660254 -0.5 ## [99,] 1.0000000 0.0000000 0.0000000 -1.0 ## [100,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [101,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [102,] 0.0000000 -1.0000000 0.0000000 1.0 ## [103,] -0.5000000 -0.8660254 0.8660254 0.5 ## [104,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [105,] -1.0000000 0.0000000 0.0000000 -1.0 ## [106,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [107,] -0.5000000 0.8660254 -0.8660254 0.5 ## [108,] 0.0000000 1.0000000 0.0000000 1.0 ## [109,] 0.5000000 0.8660254 0.8660254 0.5 ## [110,] 0.8660254 0.5000000 0.8660254 -0.5 ## [111,] 1.0000000 0.0000000 0.0000000 -1.0 ## [112,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [113,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [114,] 0.0000000 -1.0000000 0.0000000 1.0 ## [115,] -0.5000000 -0.8660254 0.8660254 0.5 ## [116,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [117,] -1.0000000 0.0000000 0.0000000 -1.0 ## [118,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [119,] -0.5000000 0.8660254 -0.8660254 0.5 ## [120,] 0.0000000 1.0000000 0.0000000 1.0 ## [121,] 0.5000000 0.8660254 0.8660254 0.5 ## [122,] 0.8660254 0.5000000 0.8660254 -0.5 ## [123,] 1.0000000 0.0000000 0.0000000 -1.0 ## [124,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [125,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [126,] 0.0000000 -1.0000000 0.0000000 1.0 ## [127,] -0.5000000 -0.8660254 0.8660254 0.5 ## [128,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [129,] -1.0000000 0.0000000 0.0000000 -1.0 ## [130,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [131,] -0.5000000 0.8660254 -0.8660254 0.5 ## [132,] 0.0000000 1.0000000 0.0000000 1.0 ## [133,] 0.5000000 0.8660254 0.8660254 0.5 ## [134,] 0.8660254 0.5000000 0.8660254 -0.5 ## [135,] 1.0000000 0.0000000 0.0000000 -1.0 ## [136,] 0.8660254 -0.5000000 -0.8660254 -0.5 ## [137,] 0.5000000 -0.8660254 -0.8660254 0.5 ## [138,] 0.0000000 -1.0000000 0.0000000 1.0 ## [139,] -0.5000000 -0.8660254 0.8660254 0.5 ## [140,] -0.8660254 -0.5000000 0.8660254 -0.5 ## [141,] -1.0000000 0.0000000 0.0000000 -1.0 ## [142,] -0.8660254 0.5000000 -0.8660254 -0.5 ## [143,] -0.5000000 0.8660254 -0.8660254 0.5 ## [144,] 0.0000000 1.0000000 0.0000000 1.0 # sin(2pi t/12) cos(2pi t/12) # sin(2pi t/12 * 2) cos(2pi t/12 * 2) colnames(fourier_x) &lt;- c(&#39;s1&#39;, &#39;c1&#39;, &#39;s2&#39;, &#39;c2&#39;) air3 &lt;- bind_cols(air2, fourier_x) glimpse(air3) ## Rows: 144 ## Columns: 8 ## $ index &lt;mth&gt; 1949 Jan, 1949 Feb, 1949 Mar, 1949 Apr, 1949 May, 1949 Jun, 1949 Jul, 1949 Aug, 1949 Sep, 1949 Oct, 1949 Nov, 1949 Dec, 1950 Jan, 1950 Feb, 1950 … ## $ value &lt;dbl&gt; 112, 118, 132, 129, 121, 135, 148, 148, 136, 119, 104, 118, 115, 126, 141, 135, 125, 149, 170, 170, 158, 133, 114, 140, 145, 150, 178, 163, 172, … ## $ ln_pass &lt;dbl&gt; 4.718499, 4.770685, 4.882802, 4.859812, 4.795791, 4.905275, 4.997212, 4.997212, 4.912655, 4.779123, 4.644391, 4.770685, 4.744932, 4.836282, 4.948… ## $ t &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39… ## $ s1 &lt;dbl&gt; 0.5000000, 0.8660254, 1.0000000, 0.8660254, 0.5000000, 0.0000000, -0.5000000, -0.8660254, -1.0000000, -0.8660254, -0.5000000, 0.0000000, 0.500000… ## $ c1 &lt;dbl&gt; 0.8660254, 0.5000000, 0.0000000, -0.5000000, -0.8660254, -1.0000000, -0.8660254, -0.5000000, 0.0000000, 0.5000000, 0.8660254, 1.0000000, 0.866025… ## $ s2 &lt;dbl&gt; 0.8660254, 0.8660254, 0.0000000, -0.8660254, -0.8660254, 0.0000000, 0.8660254, 0.8660254, 0.0000000, -0.8660254, -0.8660254, 0.0000000, 0.8660254… ## $ c2 &lt;dbl&gt; 0.5, -0.5, -1.0, -0.5, 0.5, 1.0, 0.5, -0.5, -1.0, -0.5, 0.5, 1.0, 0.5, -0.5, -1.0, -0.5, 0.5, 1.0, 0.5, -0.5, -1.0, -0.5, 0.5, 1.0, 0.5, -0.5, -1… air3_test &lt;- tail(air3, 24) air3_train &lt;- head(air3, -24) autoplot(air3_train, ln_pass) + autolayer(air3_test, ln_pass, col=&#39;red&#39;) Linear regression: cv_params &lt;- trainControl(method = &#39;cv&#39;, number = 5) ols &lt;- train(ln_pass ~ t + s1 + c1 + s2 + c2, data = air3_train, trControl = cv_params, method = &#39;lm&#39;) Random Forest: rf &lt;- train(ln_pass ~ t + s1 + c1 + s2 + c2, data = air3_train, trControl = cv_params, method = &#39;ranger&#39;, num.trees = 10000) Gradient Boosting: gb &lt;- train(ln_pass ~ t + s1 + c1 + s2 + c2, data = air3_train, trControl = cv_params, method = &#39;xgbTree&#39;) ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:42] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:43] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:44] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:45] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:46] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:47] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:48] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:49] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:50] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:51] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:51] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:51] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:51] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ## [10:53:51] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead. ols_fcst &lt;- predict(ols, air3_test) rf_fcst &lt;- predict(rf, air3_test) gb_fcst &lt;- predict(gb, air3_test) air4_test &lt;- air3_test |&gt; mutate(ols = ols_fcst, rf = rf_fcst, gb = gb_fcst) air4_test |&gt; glimpse() ## Rows: 24 ## Columns: 11 ## $ index &lt;mth&gt; 1959 Jan, 1959 Feb, 1959 Mar, 1959 Apr, 1959 May, 1959 Jun, 1959 Jul, 1959 Aug, 1959 Sep, 1959 Oct, 1959 Nov, 1959 Dec, 1960 Jan, 1960 Feb, 1960 … ## $ value &lt;dbl&gt; 360, 342, 406, 396, 420, 472, 548, 559, 463, 407, 362, 405, 417, 391, 419, 461, 472, 535, 622, 606, 508, 461, 390, 432 ## $ ln_pass &lt;dbl&gt; 5.886104, 5.834811, 6.006353, 5.981414, 6.040255, 6.156979, 6.306275, 6.326149, 6.137727, 6.008813, 5.891644, 6.003887, 6.033086, 5.968708, 6.037… ## $ t &lt;int&gt; 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144 ## $ s1 &lt;dbl&gt; 0.5000000, 0.8660254, 1.0000000, 0.8660254, 0.5000000, 0.0000000, -0.5000000, -0.8660254, -1.0000000, -0.8660254, -0.5000000, 0.0000000, 0.500000… ## $ c1 &lt;dbl&gt; 0.8660254, 0.5000000, 0.0000000, -0.5000000, -0.8660254, -1.0000000, -0.8660254, -0.5000000, 0.0000000, 0.5000000, 0.8660254, 1.0000000, 0.866025… ## $ s2 &lt;dbl&gt; 0.8660254, 0.8660254, 0.0000000, -0.8660254, -0.8660254, 0.0000000, 0.8660254, 0.8660254, 0.0000000, -0.8660254, -0.8660254, 0.0000000, 0.8660254… ## $ c2 &lt;dbl&gt; 0.5, -0.5, -1.0, -0.5, 0.5, 1.0, 0.5, -0.5, -1.0, -0.5, 0.5, 1.0, 0.5, -0.5, -1.0, -0.5, 0.5, 1.0, 0.5, -0.5, -1.0, -0.5, 0.5, 1.0 ## $ ols &lt;dbl&gt; 5.988780, 6.061833, 6.080999, 6.084337, 6.133853, 6.238836, 6.333665, 6.335733, 6.227632, 6.081521, 5.999451, 6.025971, 6.116483, 6.189536, 6.208… ## $ rf &lt;dbl&gt; 5.834121, 5.846436, 5.914530, 5.893091, 5.905278, 6.028810, 6.132782, 6.126966, 5.973531, 5.852052, 5.780770, 5.822512, 5.834121, 5.846436, 5.914… ## $ gb &lt;dbl&gt; 5.874744, 5.807138, 5.875329, 5.844591, 5.861524, 5.975298, 6.112180, 6.109149, 5.920560, 5.824709, 5.721851, 5.822887, 5.874744, 5.807138, 5.875… air3_train |&gt; autoplot(ln_pass) + autolayer(air4_test, ln_pass) + autolayer(air4_test, ols, col=&#39;red&#39;) + autolayer(air4_test, rf, col=&#39;green&#39;) + autolayer(air4_test, gb, col=&#39;blue&#39;) 7.8.2 Example 2. Daily data library(tsibbledata) head(vic_elec) ## # A tsibble: 6 x 5 [30m] &lt;Australia/Melbourne&gt; ## Time Demand Temperature Date Holiday ## &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; &lt;lgl&gt; ## 1 2012-01-01 00:00:00 4383. 21.4 2012-01-01 TRUE ## 2 2012-01-01 00:30:00 4263. 21.0 2012-01-01 TRUE ## 3 2012-01-01 01:00:00 4049. 20.7 2012-01-01 TRUE ## 4 2012-01-01 01:30:00 3878. 20.6 2012-01-01 TRUE ## 5 2012-01-01 02:00:00 4036. 20.4 2012-01-01 TRUE ## 6 2012-01-01 02:30:00 3866. 20.2 2012-01-01 TRUE elec &lt;- vic_elec |&gt; index_by(Date) |&gt; summarise(dem = mean(Demand), temp = mean(Temperature)) gg_tsdisplay(elec) ## Plot variable not specified, automatically selected `y = dem` gg_tsdisplay(tail(elec, 60)) ## Plot variable not specified, automatically selected `y = dem` elec_train &lt;- head(elec, -60) elec_test &lt;- tail(elec, 60) mods &lt;- elec_train |&gt; model( naive = NAIVE(dem), arima_fK1 = ARIMA(dem ~ fourier(K = 1) + PDQ(0, 0, 0)), arima_fK2 = ARIMA(dem ~ fourier(K = 2) + PDQ(0, 0, 0)), arima_fK3 = ARIMA(dem ~ fourier(K = 3) + PDQ(0, 0, 0)) ) frct &lt;- mods |&gt; forecast(h = 60) frct |&gt; autoplot(tail(elec_train, 30)) + facet_grid(.model ~ .) frct |&gt; accuracy(elec) ## # A tibble: 4 × 10 ## .model .type ME RMSE MAE MPE MAPE MASE RMSSE ACF1 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 arima_fK1 Test -21.8 364. 269. -1.06 6.38 0.910 0.769 0.549 ## 2 arima_fK2 Test -67.6 352. 246. -2.03 5.95 0.832 0.744 0.628 ## 3 arima_fK3 Test -55.1 348. 245. -1.73 5.93 0.829 0.735 0.647 ## 4 naive Test 407. 555. 466. 8.67 10.3 1.58 1.17 0.552 7.8.3 Example 3 library(ARDL) glimpse(denmark) ## &#39;zooreg&#39; series from 1974 Q1 to 1987 Q3 ## Data: num [1:55, 1:5] 11.6 11.6 11.6 11.6 11.6 ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : NULL ## ..$ : chr [1:5] &quot;LRM&quot; &quot;LRY&quot; &quot;LPY&quot; &quot;IBO&quot; ... ## Index: &#39;yearqtr&#39; num [1:55] 1974 Q1 1974 Q2 1974 Q3 1974 Q4 ... ## Frequency: 4 time(denmark) ## [1] &quot;1974 Q1&quot; &quot;1974 Q2&quot; &quot;1974 Q3&quot; &quot;1974 Q4&quot; &quot;1975 Q1&quot; &quot;1975 Q2&quot; &quot;1975 Q3&quot; &quot;1975 Q4&quot; &quot;1976 Q1&quot; &quot;1976 Q2&quot; &quot;1976 Q3&quot; &quot;1976 Q4&quot; &quot;1977 Q1&quot; &quot;1977 Q2&quot; &quot;1977 Q3&quot; ## [16] &quot;1977 Q4&quot; &quot;1978 Q1&quot; &quot;1978 Q2&quot; &quot;1978 Q3&quot; &quot;1978 Q4&quot; &quot;1979 Q1&quot; &quot;1979 Q2&quot; &quot;1979 Q3&quot; &quot;1979 Q4&quot; &quot;1980 Q1&quot; &quot;1980 Q2&quot; &quot;1980 Q3&quot; &quot;1980 Q4&quot; &quot;1981 Q1&quot; &quot;1981 Q2&quot; ## [31] &quot;1981 Q3&quot; &quot;1981 Q4&quot; &quot;1982 Q1&quot; &quot;1982 Q2&quot; &quot;1982 Q3&quot; &quot;1982 Q4&quot; &quot;1983 Q1&quot; &quot;1983 Q2&quot; &quot;1983 Q3&quot; &quot;1983 Q4&quot; &quot;1984 Q1&quot; &quot;1984 Q2&quot; &quot;1984 Q3&quot; &quot;1984 Q4&quot; &quot;1985 Q1&quot; ## [46] &quot;1985 Q2&quot; &quot;1985 Q3&quot; &quot;1985 Q4&quot; &quot;1986 Q1&quot; &quot;1986 Q2&quot; &quot;1986 Q3&quot; &quot;1986 Q4&quot; &quot;1987 Q1&quot; &quot;1987 Q2&quot; &quot;1987 Q3&quot; den &lt;- as_tibble(denmark) den ## # A tibble: 55 × 5 ## LRM LRY LPY IBO IDE ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 11.6 5.90 -0.619 0.155 0.094 ## 2 11.6 5.87 -0.581 0.178 0.0955 ## 3 11.6 5.84 -0.543 0.171 0.0955 ## 4 11.6 5.81 -0.505 0.152 0.0955 ## 5 11.6 5.80 -0.486 0.134 0.0885 ## 6 11.6 5.79 -0.454 0.133 0.079 ## 7 11.7 5.83 -0.441 0.128 0.076 ## 8 11.8 5.93 -0.439 0.129 0.074 ## 9 11.8 5.94 -0.404 0.141 0.072 ## 10 11.8 5.94 -0.373 0.153 0.078 ## # ℹ 45 more rows den2 &lt;- den |&gt; mutate(quarter = yearquarter(time(denmark))) den2 ## # A tibble: 55 × 6 ## LRM LRY LPY IBO IDE quarter ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;qtr&gt; ## 1 11.6 5.90 -0.619 0.155 0.094 1974 Q1 ## 2 11.6 5.87 -0.581 0.178 0.0955 1974 Q2 ## 3 11.6 5.84 -0.543 0.171 0.0955 1974 Q3 ## 4 11.6 5.81 -0.505 0.152 0.0955 1974 Q4 ## 5 11.6 5.80 -0.486 0.134 0.0885 1975 Q1 ## 6 11.6 5.79 -0.454 0.133 0.079 1975 Q2 ## 7 11.7 5.83 -0.441 0.128 0.076 1975 Q3 ## 8 11.8 5.93 -0.439 0.129 0.074 1975 Q4 ## 9 11.8 5.94 -0.404 0.141 0.072 1976 Q1 ## 10 11.8 5.94 -0.373 0.153 0.078 1976 Q2 ## # ℹ 45 more rows den3 &lt;- as_tsibble(den2, index = quarter) den3 |&gt; gg_tsdisplay(LRM) ardl1 &lt;- ardl(data = denmark, LRM ~ LRY + IBO + IDE, order = c(2, 1, 2, 2)) ardl1 ## ## Time series regression with &quot;zooreg&quot; data: ## Start = 1974 Q3, End = 1987 Q3 ## ## Call: ## dynlm::dynlm(formula = full_formula, data = data, start = start, ## end = end) ## ## Coefficients: ## (Intercept) L(LRM, 1) L(LRM, 2) LRY L(LRY, 1) IBO L(IBO, 1) L(IBO, 2) IDE L(IDE, 1) L(IDE, 2) ## 2.2940 0.2852 0.3360 0.6974 -0.3025 -1.0175 -0.2495 -0.5059 0.4163 -0.1528 0.7604 ardl_many &lt;- auto_ardl(data = denmark, LRM ~ LRY + IBO + IDE, max_order = 3) ardl_many ## $best_model ## ## Time series regression with &quot;zooreg&quot; data: ## Start = 1974 Q3, End = 1987 Q3 ## ## Call: ## dynlm::dynlm(formula = full_formula, data = data, start = start, ## end = end) ## ## Coefficients: ## (Intercept) L(LRM, 1) L(LRM, 2) LRY L(LRY, 1) L(LRY, 2) IBO IDE ## 1.9834 0.2954 0.4205 0.6823 -0.1502 -0.2753 -1.4068 0.6103 ## ## ## $best_order ## LRM LRY IBO IDE ## 2 2 0 0 ## ## $top_orders ## LRM LRY IBO IDE AIC ## 1 2 2 0 0 -249.6266 ## 2 2 2 0 1 -247.7786 ## 3 2 1 0 0 -247.5643 ## 4 2 2 1 1 -246.6885 ## 5 3 3 3 3 -246.3061 ## 6 2 2 1 2 -246.2709 ## 7 2 1 1 1 -245.8736 ## 8 2 2 2 2 -245.7722 ## 9 1 1 0 0 -245.6620 ## 10 2 1 2 2 -245.1712 ## 11 1 0 0 0 -244.4317 ## 12 1 1 0 1 -243.7702 ## 13 1 1 1 1 -241.8886 ## 14 1 0 1 1 -240.8979 ardl_many$best_model ## ## Time series regression with &quot;zooreg&quot; data: ## Start = 1974 Q3, End = 1987 Q3 ## ## Call: ## dynlm::dynlm(formula = full_formula, data = data, start = start, ## end = end) ## ## Coefficients: ## (Intercept) L(LRM, 1) L(LRM, 2) LRY L(LRY, 1) L(LRY, 2) IBO IDE ## 1.9834 0.2954 0.4205 0.6823 -0.1502 -0.2753 -1.4068 0.6103 "],["missing-values-anomalies-structural-shift.html", "Chapter 8 Missing values, anomalies, structural shift 8.1 Missing values 8.2 Outliers and anomalies 8.3 Structural shift 8.4 Bayesian Structural Model 8.5 Causal impact", " Chapter 8 Missing values, anomalies, structural shift library(tidyverse) library(fpp3) library(ggplot2) library(rio) library(urca) library(imputeTS) 8.1 Missing values Data loading. air &lt;- AirPassengers |&gt; as_tsibble() air |&gt; gg_tsdisplay() ## Plot variable not specified, automatically selected `y = value` Create some NA’s. lair &lt;- log(AirPassengers) lair_na &lt;- lair where_na &lt;- c(5:6, 30:32, 70, 90:91, 110, 124) lair_na[where_na] &lt;- NA Plot NA’s. ggplot_na_distribution(lair_na) ggplot_na_distribution2(lair_na) 8.1.1 Imputation with linear interpolation # linear interpolation lair_int &lt;- na_interpolation(lair_na) ggplot_na_imputations(lair_na, lair_int, lair) 8.1.2 ARIMA imputation # ARIMA imputation mod &lt;- arima(lair_na, order = c(1,1,0), seasonal = c(0,1,0))$model lair_arima &lt;- na_kalman(lair_na, model = mod) lair_arima.auto &lt;- na_kalman(lair_na, model = &#39;auto.arima&#39;) ggplot_na_imputations(lair_na, lair_arima.auto, lair) 8.1.3 Imputation with STL decomposition # STL decomposition lair_seas &lt;- na_seadec(lair_na) ggplot_na_imputations(lair_na, lair_seas, lair) 8.2 Outliers and anomalies library(anomalize) library(tibbletime) library(lubridate) Make a table from AirPAssenger. air &lt;- tibble(pass=AirPassengers) head(air) ## # A tibble: 6 × 1 ## pass ## &lt;dbl&gt; ## 1 112 ## 2 118 ## 3 132 ## 4 129 ## 5 121 ## 6 135 Add a new column for date. n &lt;- nrow(air) air2 &lt;- air |&gt; mutate(date = ymd(&#39;1949-01-01&#39;) + months(0:(n-1))) air2 ## # A tibble: 144 × 2 ## pass date ## &lt;dbl&gt; &lt;date&gt; ## 1 112 1949-01-01 ## 2 118 1949-02-01 ## 3 132 1949-03-01 ## 4 129 1949-04-01 ## 5 121 1949-05-01 ## 6 135 1949-06-01 ## 7 148 1949-07-01 ## 8 148 1949-08-01 ## 9 136 1949-09-01 ## 10 119 1949-10-01 ## # ℹ 134 more rows Plot the data. qplot(data=air2, x = date, y = pass, geom = &#39;line&#39;) ## Don&#39;t know how to automatically pick scale for object of type &lt;ts&gt;. Defaulting to continuous. Make a log-transformation to stabilize the variance of the data. air3 &lt;- air2 |&gt; mutate(ln_pass = log(pass)) air3 ## # A tibble: 144 × 3 ## pass date ln_pass ## &lt;dbl&gt; &lt;date&gt; &lt;dbl&gt; ## 1 112 1949-01-01 4.72 ## 2 118 1949-02-01 4.77 ## 3 132 1949-03-01 4.88 ## 4 129 1949-04-01 4.86 ## 5 121 1949-05-01 4.80 ## 6 135 1949-06-01 4.91 ## 7 148 1949-07-01 5.00 ## 8 148 1949-08-01 5.00 ## 9 136 1949-09-01 4.91 ## 10 119 1949-10-01 4.78 ## # ℹ 134 more rows Plot the transformed data. qplot(data=air3, x = date, y = ln_pass, geom = &#39;line&#39;) ## Don&#39;t know how to automatically pick scale for object of type &lt;ts&gt;. Defaulting to continuous. Make a couple of anomalies to try to identify them. air4 &lt;- air3 |&gt; mutate(ln_pass_an = ln_pass) air4$ln_pass_an[30] = 6 air4$ln_pass_an[110] = 5.3 qplot(data=air4, x = date, y = ln_pass_an, geom = &#39;line&#39;) ## Don&#39;t know how to automatically pick scale for object of type &lt;ts&gt;. Defaulting to continuous. Run a STL decomposition to identify anomalies. decomp &lt;- time_decompose(air4, target = ln_pass_an, frequency = 12) ## Converting from tbl_df to tbl_time. ## Auto-index message: index = date ## frequency = 12 months ## trend = 36 months decomp ## # A time tibble: 144 × 5 ## # Index: date ## date observed season trend remainder ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1949-01-01 4.72 -0.0826 4.76 0.0440 ## 2 1949-02-01 4.77 -0.103 4.77 0.106 ## 3 1949-03-01 4.88 0.0176 4.78 0.0866 ## 4 1949-04-01 4.86 -0.0205 4.79 0.0909 ## 5 1949-05-01 4.80 -0.00533 4.80 0.000921 ## 6 1949-06-01 4.91 0.116 4.81 -0.0224 ## 7 1949-07-01 5.00 0.218 4.82 -0.0427 ## 8 1949-08-01 5.00 0.203 4.83 -0.0393 ## 9 1949-09-01 4.91 0.0603 4.84 0.00788 ## 10 1949-10-01 4.78 -0.0772 4.86 0.000617 ## # ℹ 134 more rows Identify anomalies by reminder component. decomp2 &lt;- anomalize(decomp, target = remainder) glimpse(decomp2) ## Rows: 144 ## Columns: 8 ## Index: date ## $ date &lt;date&gt; 1949-01-01, 1949-02-01, 1949-03-01, 1949-04-01, 1949-05-01, 1949-06-01, 1949-07-01, 1949-08-01, 1949-09-01, 1949-10-01, 1949-11-01, 1949-12… ## $ observed &lt;dbl&gt; 4.718499, 4.770685, 4.882802, 4.859812, 4.795791, 4.905275, 4.997212, 4.997212, 4.912655, 4.779123, 4.644391, 4.770685, 4.744932, 4.836282, … ## $ season &lt;dbl&gt; -0.082643367, -0.103229073, 0.017576244, -0.020530935, -0.005330328, 0.116378118, 0.217623611, 0.203169292, 0.060332081, -0.077241270, -0.22… ## $ trend &lt;dbl&gt; 4.757105, 4.767879, 4.778653, 4.789426, 4.800200, 4.811261, 4.822322, 4.833383, 4.844443, 4.855747, 4.867051, 4.878355, 4.889659, 4.901442, … ## $ remainder &lt;dbl&gt; 0.0440367731, 0.1060345664, 0.0865728814, 0.0909168770, 0.0009207448, -0.0223643024, -0.0427331355, -0.0393396512, 0.0078793378, 0.000617403… ## $ remainder_l1 &lt;dbl&gt; -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.14527… ## $ remainder_l2 &lt;dbl&gt; 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.143955… ## $ anomaly &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;N… Columns: date: date of observation observed: observed value season: seasonal component trend: trend component remainder: remainder component remainder_l1: left bound of the normal value remainder_l2: right bound of the normal value anomaly: whether the observation is an anomaly or not Plot the anomalies. decomp2 |&gt; plot_anomalies() Recompose the left and right bounds into the original variable (transformed). decomp3 &lt;- time_recompose(decomp2) glimpse(decomp3) ## Rows: 144 ## Columns: 10 ## Index: date ## $ date &lt;date&gt; 1949-01-01, 1949-02-01, 1949-03-01, 1949-04-01, 1949-05-01, 1949-06-01, 1949-07-01, 1949-08-01, 1949-09-01, 1949-10-01, 1949-11-01, 1949-1… ## $ observed &lt;dbl&gt; 4.718499, 4.770685, 4.882802, 4.859812, 4.795791, 4.905275, 4.997212, 4.997212, 4.912655, 4.779123, 4.644391, 4.770685, 4.744932, 4.836282,… ## $ season &lt;dbl&gt; -0.082643367, -0.103229073, 0.017576244, -0.020530935, -0.005330328, 0.116378118, 0.217623611, 0.203169292, 0.060332081, -0.077241270, -0.2… ## $ trend &lt;dbl&gt; 4.757105, 4.767879, 4.778653, 4.789426, 4.800200, 4.811261, 4.822322, 4.833383, 4.844443, 4.855747, 4.867051, 4.878355, 4.889659, 4.901442,… ## $ remainder &lt;dbl&gt; 0.0440367731, 0.1060345664, 0.0865728814, 0.0909168770, 0.0009207448, -0.0223643024, -0.0427331355, -0.0393396512, 0.0078793378, 0.00061740… ## $ remainder_l1 &lt;dbl&gt; -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452… ## $ remainder_l2 &lt;dbl&gt; 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.14395… ## $ anomaly &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;… ## $ recomposed_l1 &lt;dbl&gt; 4.529185, 4.519373, 4.650952, 4.623618, 4.649593, 4.782362, 4.894668, 4.891275, 4.759498, 4.633229, 4.501086, 4.627661, 4.661738, 4.652935,… ## $ recomposed_l2 &lt;dbl&gt; 4.818418, 4.808606, 4.940185, 4.912851, 4.938825, 5.071595, 5.183901, 5.180507, 5.048731, 4.922462, 4.790319, 4.916894, 4.950971, 4.942168,… Plot the decomposition. plot_anomaly_decomposition(decomp2) Clean the data into the origin series (transformed). decomp4 &lt;- clean_anomalies(decomp3) glimpse(decomp4) ## Rows: 144 ## Columns: 11 ## Index: date ## $ date &lt;date&gt; 1949-01-01, 1949-02-01, 1949-03-01, 1949-04-01, 1949-05-01, 1949-06-01, 1949-07-01, 1949-08-01, 1949-09-01, 1949-10-01, 1949-11-01, 194… ## $ observed &lt;dbl&gt; 4.718499, 4.770685, 4.882802, 4.859812, 4.795791, 4.905275, 4.997212, 4.997212, 4.912655, 4.779123, 4.644391, 4.770685, 4.744932, 4.8362… ## $ season &lt;dbl&gt; -0.082643367, -0.103229073, 0.017576244, -0.020530935, -0.005330328, 0.116378118, 0.217623611, 0.203169292, 0.060332081, -0.077241270, -… ## $ trend &lt;dbl&gt; 4.757105, 4.767879, 4.778653, 4.789426, 4.800200, 4.811261, 4.822322, 4.833383, 4.844443, 4.855747, 4.867051, 4.878355, 4.889659, 4.9014… ## $ remainder &lt;dbl&gt; 0.0440367731, 0.1060345664, 0.0865728814, 0.0909168770, 0.0009207448, -0.0223643024, -0.0427331355, -0.0393396512, 0.0078793378, 0.00061… ## $ remainder_l1 &lt;dbl&gt; -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1452773, -0.1… ## $ remainder_l2 &lt;dbl&gt; 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.1439555, 0.14… ## $ anomaly &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;… ## $ recomposed_l1 &lt;dbl&gt; 4.529185, 4.519373, 4.650952, 4.623618, 4.649593, 4.782362, 4.894668, 4.891275, 4.759498, 4.633229, 4.501086, 4.627661, 4.661738, 4.6529… ## $ recomposed_l2 &lt;dbl&gt; 4.818418, 4.808606, 4.940185, 4.912851, 4.938825, 5.071595, 5.183901, 5.180507, 5.048731, 4.922462, 4.790319, 4.916894, 4.950971, 4.9421… ## $ observed_cleaned &lt;dbl&gt; 4.718499, 4.770685, 4.882802, 4.859812, 4.795791, 4.905275, 4.997212, 4.997212, 4.912655, 4.779123, 4.644391, 4.770685, 4.744932, 4.8362… The data are now without anomalies. qplot(data=decomp4, x = date, y = observed_cleaned, geom = &#39;line&#39;) 8.3 Structural shift library(changepoint) m &lt;- import(&#39;https://github.com/akarlinsky/world_mortality/raw/main/world_mortality.csv&#39;) glimpse(m) ## Rows: 33,283 ## Columns: 6 ## $ iso3c &lt;chr&gt; &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, … ## $ country_name &lt;chr&gt; &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania… ## $ year &lt;int&gt; 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 20… ## $ time &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8,… ## $ time_unit &lt;chr&gt; &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly… ## $ deaths &lt;dbl&gt; 2490, 2139, 2051, 1906, 1709, 1561, 2008, 1687, 1569, 1560, 1728, 2010, 2065, 1905, 1910, 1652, 1716, 1678, 1643, 1578, 1459, 1743, 1855, 21… m2 &lt;- m |&gt; filter(time_unit == &#39;monthly&#39;, country_name == &#39;Russia&#39;) |&gt; mutate(date = ymd(paste0(year, &#39;-&#39;, time, &#39;-01&#39;))) |&gt; select(date, deaths) qplot(data = m2, x = date, y = deaths, geom = &#39;line&#39;) Make a STL decomposition. nm3 &lt;- m2 |&gt; as_tbl_time(index = date) decomp &lt;- time_decompose(nm3, target = deaths) ## frequency = 12 months ## trend = 58.5 months decomp ## # A time tibble: 117 × 5 ## # Index: date ## date observed season trend remainder ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015-01-01 176304. 18808. 160750. -3254. ## 2 2015-02-01 158060. -4507. 160503. 2063. ## 3 2015-03-01 173232. 5253. 160257. 7722. ## 4 2015-04-01 161394. -2331. 160011. 3714. ## 5 2015-05-01 163293 4958. 159765. -1430. ## 6 2015-06-01 154992. -5279. 159519. 753. ## 7 2015-07-01 152969. -4278. 159273. -2026. ## 8 2015-08-01 152152. -5196. 159028. -1679. ## 9 2015-09-01 148653. -6230. 158783. -3900. ## 10 2015-10-01 158130. 260. 158538. -669. ## # ℹ 107 more rows Find a structural shift. # AMOC = At Most One Changepoint one_break &lt;- cpt.mean(nm3$deaths, method = &#39;AMOC&#39;) one_break ## Class &#39;cpt&#39; : Changepoint Object ## ~~ : S4 class containing 12 slots with names ## cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est ## ## Created on : Mon Dec 16 10:54:10 2024 ## ## summary(.) : ## ---------- ## Created Using changepoint version 2.3 ## Changepoint type : Change in mean ## Method of analysis : AMOC ## Test Statistic : Normal ## Type of penalty : MBIC with value, 14.28652 ## Minimum Segment Length : 1 ## Maximum no. of cpts : 1 ## Changepoint Locations : 64 Look at the structural shift. nm3[64, ] ## # A time tibble: 1 × 2 ## # Index: date ## date deaths ## &lt;date&gt; &lt;dbl&gt; ## 1 2020-04-01 152500. Plot the structural shift. plot(one_break) # =&gt; Assumption: The structural shift because of the COVID Apply 3 structural shifts searching. # BigSeg = Binary Segmentation all_breaks &lt;- cpt.mean(nm3$deaths, method = &#39;BinSeg&#39;, Q = 3) ## Warning in BINSEG(sumstat, pen = pen.value, cost_func = costfunc, minseglen = minseglen, : The number of changepoints identified is Q, it is advised to increase Q ## to make sure changepoints have not been missed. all_breaks ## Class &#39;cpt&#39; : Changepoint Object ## ~~ : S4 class containing 14 slots with names ## cpts.full pen.value.full data.set cpttype method test.stat pen.type pen.value minseglen cpts ncpts.max param.est date version ## ## Created on : Mon Dec 16 10:54:10 2024 ## ## summary(.) : ## ---------- ## Created Using changepoint version 2.3 ## Changepoint type : Change in mean ## Method of analysis : BinSeg ## Test Statistic : Normal ## Type of penalty : MBIC with value, 14.28652 ## Minimum Segment Length : 1 ## Maximum no. of cpts : 3 ## Changepoint Locations : 64 69 87 ## Range of segmentations: ## [,1] [,2] [,3] ## [1,] 64 NA NA ## [2,] 64 87 NA ## [3,] 64 87 69 ## ## For penalty values: 6899445638 6899445638 5101474826 plot(all_breaks) Apply to decomposed series. # AMOC = At Most One Changepoint one_break &lt;- cpt.mean(decomp$remainder, method = &#39;AMOC&#39;) one_break ## Class &#39;cpt&#39; : Changepoint Object ## ~~ : S4 class containing 12 slots with names ## cpttype date version data.set method test.stat pen.type pen.value minseglen cpts ncpts.max param.est ## ## Created on : Mon Dec 16 10:54:10 2024 ## ## summary(.) : ## ---------- ## Created Using changepoint version 2.3 ## Changepoint type : Change in mean ## Method of analysis : AMOC ## Test Statistic : Normal ## Type of penalty : MBIC with value, 14.28652 ## Minimum Segment Length : 1 ## Maximum no. of cpts : 1 ## Changepoint Locations : 64 plot(one_break) 8.4 Bayesian Structural Model library(bsts) Plot the data. plot(AirPassengers) Log the data to stabilize the variance. log_air &lt;- log(AirPassengers) plot(log_air) Observations: Stable variance of the transformed data There is a linear trend There is a seasonality Step by step: Create an empty list model = list() Add a trend model &lt;- AddLocalLinearTrend(model, y = log_air) Add a season model &lt;- AddTrig(model, y = log_air, period = 12, frequencies = 1:2) Run generation poster &lt;- bsts(log_air, state.specification = model, niter = 2000) ## =-=-=-=-= Iteration 0 Mon Dec 16 10:54:10 2024 =-=-=-=-= ## =-=-=-=-= Iteration 200 Mon Dec 16 10:54:12 2024 =-=-=-=-= ## =-=-=-=-= Iteration 400 Mon Dec 16 10:54:14 2024 =-=-=-=-= ## =-=-=-=-= Iteration 600 Mon Dec 16 10:54:16 2024 =-=-=-=-= ## =-=-=-=-= Iteration 800 Mon Dec 16 10:54:17 2024 =-=-=-=-= ## =-=-=-=-= Iteration 1000 Mon Dec 16 10:54:19 2024 =-=-=-=-= ## =-=-=-=-= Iteration 1200 Mon Dec 16 10:54:21 2024 =-=-=-=-= ## =-=-=-=-= Iteration 1400 Mon Dec 16 10:54:22 2024 =-=-=-=-= ## =-=-=-=-= Iteration 1600 Mon Dec 16 10:54:24 2024 =-=-=-=-= ## =-=-=-=-= Iteration 1800 Mon Dec 16 10:54:26 2024 =-=-=-=-= Plot the data plot(poster, &#39;components&#39;) Make forecasts. frst &lt;- predict(poster, horizon = 24, quantiles = c(0.05, 0.95), burn = 1000) frst$mean ## [1] 6.109041 6.156662 6.163794 6.181784 6.265982 6.408010 6.511879 6.498185 6.365023 6.206325 6.124723 6.144269 6.217628 6.263769 6.266721 6.287702 6.375675 ## [18] 6.517287 6.616565 6.601696 6.470412 6.308873 6.228706 6.246486 plot(frst) 8.5 Causal impact library(CausalImpact) m &lt;- import(&#39;https://github.com/akarlinsky/world_mortality/raw/main/world_mortality.csv&#39;) glimpse(m) ## Rows: 33,283 ## Columns: 6 ## $ iso3c &lt;chr&gt; &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, &quot;ALB&quot;, … ## $ country_name &lt;chr&gt; &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania… ## $ year &lt;int&gt; 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 2016, 20… ## $ time &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8,… ## $ time_unit &lt;chr&gt; &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly&quot;, &quot;monthly… ## $ deaths &lt;dbl&gt; 2490, 2139, 2051, 1906, 1709, 1561, 2008, 1687, 1569, 1560, 1728, 2010, 2065, 1905, 1910, 1652, 1716, 1678, 1643, 1578, 1459, 1743, 1855, 21… m2 &lt;- m |&gt; filter(time_unit == &#39;monthly&#39;, country_name == &#39;Russia&#39;) |&gt; mutate(date = ymd(paste0(year, &#39;-&#39;, time, &#39;-01&#39;))) |&gt; select(date, deaths) qplot(data = m2, x = date, y = deaths, geom = &#39;line&#39;) start_covid &lt;- 61 # number of observation when the Covid has been started impact &lt;- CausalImpact(data = m2$deaths, pre.period = c(1, start_covid-1), post.period = c(start_covid, nrow(m2))) impact ## Posterior inference {CausalImpact} ## ## Average Cumulative ## Actual 168523 9605784 ## Prediction (s.d.) 154347 (1779) 8797770 (101406) ## 95% CI [151058, 158022] [8610319, 9007261] ## ## Absolute effect (s.d.) 14176 (1779) 808014 (101406) ## 95% CI [10500, 17464] [598523, 995465] ## ## Relative effect (s.d.) 9.2% (1.3%) 9.2% (1.3%) ## 95% CI [6.6%, 12%] [6.6%, 12%] ## ## Posterior tail-area probability p: 0.00101 ## Posterior prob. of a causal effect: 99.8995% ## ## For more details, type: summary(impact, &quot;report&quot;) plot(impact) summary(impact) ## Posterior inference {CausalImpact} ## ## Average Cumulative ## Actual 168523 9605784 ## Prediction (s.d.) 154347 (1779) 8797770 (101406) ## 95% CI [151058, 158022] [8610319, 9007261] ## ## Absolute effect (s.d.) 14176 (1779) 808014 (101406) ## 95% CI [10500, 17464] [598523, 995465] ## ## Relative effect (s.d.) 9.2% (1.3%) 9.2% (1.3%) ## 95% CI [6.6%, 12%] [6.6%, 12%] ## ## Posterior tail-area probability p: 0.00101 ## Posterior prob. of a causal effect: 99.8995% ## ## For more details, type: summary(impact, &quot;report&quot;) summary(impact, &#39;report&#39;) ## Analysis report {CausalImpact} ## ## ## During the post-intervention period, the response variable had an average value of approx. 168.52K. By contrast, in the absence of an intervention, we would have expected an average response of 154.35K. The 95% interval of this counterfactual prediction is [151.06K, 158.02K]. Subtracting this prediction from the observed response yields an estimate of the causal effect the intervention had on the response variable. This effect is 14.18K with a 95% interval of [10.50K, 17.46K]. For a discussion of the significance of this effect, see below. ## ## Summing up the individual data points during the post-intervention period (which can only sometimes be meaningfully interpreted), the response variable had an overall value of 9.61M. By contrast, had the intervention not taken place, we would have expected a sum of 8.80M. The 95% interval of this prediction is [8.61M, 9.01M]. ## ## The above results are given in terms of absolute numbers. In relative terms, the response variable showed an increase of +9%. The 95% interval of this percentage is [+7%, +12%]. ## ## This means that the positive effect observed during the intervention period is statistically significant and unlikely to be due to random fluctuations. It should be noted, however, that the question of whether this increase also bears substantive significance can only be answered by comparing the absolute effect (14.18K) to the original goal of the underlying intervention. ## ## The probability of obtaining this effect by chance is very small (Bayesian one-sided tail-area probability p = 0.001). This means the causal effect can be considered statistically significant. "],["questions-and-answers.html", "Chapter 9 Questions and answers 9.1 Multiseasonality 9.2 Croston’s Algorithm", " Chapter 9 Questions and answers library(tidyverse) library(fpp3) library(ggplot2) library(rio) library(urca) library(imputeTS) 9.1 Multiseasonality bank_calls ## # A tsibble: 27,716 x 2 [5m] &lt;UTC&gt; ## DateTime Calls ## &lt;dttm&gt; &lt;dbl&gt; ## 1 2003-03-03 07:00:00 111 ## 2 2003-03-03 07:05:00 113 ## 3 2003-03-03 07:10:00 76 ## 4 2003-03-03 07:15:00 82 ## 5 2003-03-03 07:20:00 91 ## 6 2003-03-03 07:25:00 87 ## 7 2003-03-03 07:30:00 75 ## 8 2003-03-03 07:35:00 89 ## 9 2003-03-03 07:40:00 99 ## 10 2003-03-03 07:45:00 125 ## # ℹ 27,706 more rows bank_calls |&gt; autoplot(Calls) calls_t &lt;- bank_calls |&gt; mutate(t = row_number()) |&gt; as_tsibble(index = t) calls_t ## # A tsibble: 27,716 x 3 [1] ## DateTime Calls t ## &lt;dttm&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2003-03-03 07:00:00 111 1 ## 2 2003-03-03 07:05:00 113 2 ## 3 2003-03-03 07:10:00 76 3 ## 4 2003-03-03 07:15:00 82 4 ## 5 2003-03-03 07:20:00 91 5 ## 6 2003-03-03 07:25:00 87 6 ## 7 2003-03-03 07:30:00 75 7 ## 8 2003-03-03 07:35:00 89 8 ## 9 2003-03-03 07:40:00 99 9 ## 10 2003-03-03 07:45:00 125 10 ## # ℹ 27,706 more rows mod &lt;- calls_t |&gt; model(stl_decomp = STL(Calls ~ season(period = 169) + season(period = 169 * 5))) mod |&gt; components() |&gt; autoplot() 9.2 Croston’s Algorithm Generate data. n_obs &lt;- 30 sales &lt;- tibble(t = 1:n_obs, volume = rpois(n = n_obs, 1.2)) sales_ts &lt;- as_tsibble(sales, index = t) mods &lt;- sales_ts |&gt; model(crost = CROSTON(volume)) frcst &lt;- mods |&gt; forecast(h = 5) frcst |&gt; autoplot() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
